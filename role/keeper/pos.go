package keeper

import (
	"context"
	"strconv"
	"strings"

	ds "github.com/memoio/go-mefs/source/go-datastore"
	"github.com/memoio/go-mefs/utils"
	"github.com/memoio/go-mefs/utils/metainfo"
	"github.com/memoio/go-mefs/utils/pos"
)

// handlePosAdd handles block_meta which is generated by pos
// value is
func (k *Info) handlePosAdd(km *metainfo.KeyMeta, metaValue []byte, from string) {
	// add provider to upkeeping if it is not in upkeeping
	err := k.ukAddProvider(pos.GetPosId(), pos.GetPosId(), from, pos.PosSkStr)
	if err != nil {
		utils.MLogger.Info("handlePosAdd err:", err)
	}
	if from != km.GetMid() {
		utils.MLogger.Info("handlePosAdd error! from!=km.mid")
	}
	blocks := strings.Split(string(metaValue), metainfo.DELIMITER)
	for _, boff := range blocks {
		//保存在本地
		blockID, off, err := utils.SplitIndex(boff)
		if err != nil {
			continue
		}

		kmBlock, err := metainfo.NewKeyMeta(blockID, metainfo.Pos)
		if err != nil {
			return
		}
		pidAndOffset := from + metainfo.DELIMITER + strconv.Itoa(off)
		err = k.ds.PutKey(context.Background(), kmBlock.ToString(), []byte(pidAndOffset), "local")
		if err != nil {
			return
		}

		//保存到内存
		bm, err := metainfo.GetBlockMeta(blockID)
		if err != nil {
			return
		}
		err = k.addBlockMeta(bm.GetQid(), blockID, from, off)
		if err != nil {
			return
		}
	}
}

// handlePosDelete() handles block_meta deletion
func (k *Info) handlePosDelete(km *metainfo.KeyMeta, metaValue []byte, from string) {
	deleteBlocks := strings.Split(string(metaValue), metainfo.DELIMITER)
	if from != km.GetMid() {
		utils.MLogger.Info("handlePosDelete error! from and km.mid are: ", from, km.GetMid())
	}
	for _, blockID := range deleteBlocks {
		//先删除本地信息
		kmBlock, err := metainfo.NewKeyMeta(blockID, metainfo.BlockPos)
		if err != nil {
			return
		}
		err = k.ds.DeleteKey(context.Background(), kmBlock.ToString(), "local")
		if err != nil && err != ds.ErrNotFound {
			return
		}
		//再删除内存中信息
		bm, err := metainfo.GetBlockMeta(blockID)
		if err != nil {
			return
		}
		k.deleteBlockMeta(bm.GetQid(), blockID, false)
	}
}
