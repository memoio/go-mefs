syntax="proto3";
package memoriae_pb;

import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

//编译方法
//protoc -I=. -I=${GOPATH}/src -I=${GOPATH}/src/github.com/gogo/protobuf/protobuf --gofast_out=Mgoogle/protobuf/timestamp.proto=github.com/gogo/protobuf/types:. *.proto 

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;


enum TxType {
    KV = 0;
    ChalReq = 1;
    ChalRes = 2;
}

enum KVType {
    Default = 0;
    BlockMeta = 1;
    //待定
}

enum PkType {
     Secp256k1 = 0;
     Ed25519 = 1;
}
message Tx {
    bytes Payload = 1; //将Payload先序列化,类型可以新订
    TxType Typ = 2; //根据不同类型Payload进行反序列化，解析出Tx
	bytes Signature = 3;  //发起Tx的Validator的签名
    bytes PubKey  = 4;  //公钥
    PkType KeyType = 5; // 公钥的类型（是否必要？）
}

message KVPayload {  //只同步KV的Tx
    bytes Key = 1;
    bytes Value = 2;
    KVType Typ = 3;
    repeated bytes Sign = 4;
}

message ChallengeRequest{  //发起挑战
    string ChallengerPrivateKey =1;
	string AcceptChallengerAddress  =2;
	string DataPath         =3;       
}

message ChallengeResult {  //挑战结果
    string ChallengerID = 1;
    string AcceptChallengerID = 2;
    string UserID = 3;
    string Proof = 4;
    bool Success = 5;
    repeated string Blocks = 6;
    int32 Random = 7;
    google.protobuf.Timestamp Time = 8 [(gogoproto.nullable)=false, (gogoproto.stdtime)=true];
}

message Payment {
    google.protobuf.Timestamp StartTime = 1  [(gogoproto.nullable)=false, (gogoproto.stdtime)=true];
    google.protobuf.Timestamp EndTime = 2 [(gogoproto.nullable)=false, (gogoproto.stdtime)=true];
    uint64 sum =3;
}