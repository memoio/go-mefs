// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package upKeeping

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// UpKeepingKPInfo is an auto generated low-level Go binding around an user-defined struct.
type UpKeepingKPInfo struct {
	Stop     bool
	Addr     common.Address
	StEnd    *big.Int
	PayIndex *big.Int
	Money    []*big.Int
}

// UpKeepingProof is an auto generated low-level Go binding around an user-defined struct.
type UpKeepingProof struct {
	StStart    *big.Int
	StLength   *big.Int
	StValue    *big.Int
	Keeper     common.Address
	Provider   common.Address
	MerkleRoot [32]byte
}

// UpKeepingABI is the input ABI used to generate the binding from.
const UpKeepingABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_query\",\"type\":\"address\"},{\"internalType\":\"addresspayable[]\",\"name\":\"_keepers\",\"type\":\"address[]\"},{\"internalType\":\"addresspayable[]\",\"name\":\"_providers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AddOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"AddProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AlterOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ExtendTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"addresspayable[]\",\"name\":\"_providers\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sign\",\"type\":\"bytes[]\"}],\"name\":\"addProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"alterOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addTime\",\"type\":\"uint256\"}],\"name\":\"extendTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"},{\"internalType\":\"addresspayable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"money\",\"type\":\"uint256[]\"}],\"internalType\":\"structUpKeeping.KPInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"},{\"internalType\":\"addresspayable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"money\",\"type\":\"uint256[]\"}],\"internalType\":\"structUpKeeping.KPInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkle_root\",\"type\":\"bytes32\"}],\"internalType\":\"structUpKeeping.Proof[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"sign\",\"type\":\"bytes[]\"}],\"name\":\"setKeeperStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"sign\",\"type\":\"bytes[]\"}],\"name\":\"setProviderStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkle_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"share\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sign\",\"type\":\"bytes[]\"}],\"name\":\"spaceTimePay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// UpKeepingBin is the compiled bytecode used for deploying new contracts.
var UpKeepingBin = "0x6080604052738391984e2f1cc8f6b916f566c1d0a6bb8a15c73a600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073aa3f46999474c4a39a597157956db2c1883b52e3600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405162004be238038062004be28339818101604052810190620000d39190620006fc565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372857ce26040518163ffffffff1660e01b815260040160206040518083038186803b1580156200017e57600080fd5b505afa15801562000193573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b99190620007db565b90508015620001ff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001f69062000849565b60405180910390fd5b87600160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600160030181905550836001600401819055508260016005018190555060004290508060016006018190555085810160016007018190555060006001600901819055508260016008018190555060005b8851811015620003d757620002a86200055b565b898281518110620002b557fe5b6020026020010151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828160400181815250506001800181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155606082015181600201556080820151816003019080519060200190620003c5929190620005a2565b50505050808060010191505062000294565b5060005b87518110156200051f57620003ef6200055b565b888281518110620003fc57fe5b6020026020010151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816040018181525050600160020181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600101556060820151816002015560808201518160030190805190602001906200050d929190620005a2565b505050508080600101915050620003db565b507f0905316f7faca135c292b6e6f8d91c19128d372722215fe029e74e75ef84c08760405160405180910390a1505050505050505050620009a7565b6040518060a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b828054828255906000526020600020908101928215620005e1579160200282015b82811115620005e0578251825591602001919060010190620005c3565b5b509050620005f09190620005f4565b5090565b5b808211156200060f576000816000905550600101620005f5565b5090565b60008151905062000624816200093f565b92915050565b6000815190506200063b8162000959565b92915050565b600082601f8301126200065357600080fd5b81516200066a62000664826200089f565b6200086b565b915081818352602084019350602081019050838560208402820111156200069057600080fd5b60005b83811015620006c45781620006a988826200062a565b84526020840193506020830192505060018101905062000693565b5050505092915050565b600081519050620006df8162000973565b92915050565b600081519050620006f6816200098d565b92915050565b600080600080600080600060e0888a0312156200071857600080fd5b6000620007288a828b0162000613565b975050602088015167ffffffffffffffff8111156200074657600080fd5b620007548a828b0162000641565b965050604088015167ffffffffffffffff8111156200077257600080fd5b620007808a828b0162000641565b9550506060620007938a828b01620006e5565b9450506080620007a68a828b01620006e5565b93505060a0620007b98a828b01620006e5565b92505060c0620007cc8a828b01620006e5565b91505092959891949750929550565b600060208284031215620007ee57600080fd5b6000620007fe84828501620006ce565b91505092915050565b600062000816601a83620008ce565b91507f6465706c6f792075706b656570696e672069732062616e6e65640000000000006000830152602082019050919050565b60006020820190508181036000830152620008648162000807565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156200089557620008946200093d565b5b8060405250919050565b600067ffffffffffffffff821115620008bd57620008bc6200093d565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000620008ec8262000913565b9050919050565b6000620009008262000913565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565bfe5b6200094a81620008df565b81146200095657600080fd5b50565b6200096481620008f3565b81146200097057600080fd5b50565b6200097e8162000907565b81146200098a57600080fd5b50565b620009988162000933565b8114620009a457600080fd5b50565b61422b80620009b76000396000f3fe60806040526004361061008a5760003560e01c8063a27aebbc11610059578063a27aebbc14610152578063d06208761461017b578063d063e733146101a4578063d187ec03146101c0578063d36dedd2146101e957610091565b80630ca05f9f146100965780632b68b9c6146100d3578063893d20e8146100ea5780638b2967881461011557610091565b3661009157005b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b8919061303e565b61021e565b6040516100ca9190613c3b565b60405180910390f35b3480156100df57600080fd5b506100e8610358565b005b3480156100f657600080fd5b506100ff610aa5565b60405161010c9190613b1c565b60405180910390f35b34801561012157600080fd5b5061013c600480360381019061013791906131b2565b610ace565b6040516101499190613c3b565b60405180910390f35b34801561015e57600080fd5b5061017960048036038101906101749190613247565b610f4c565b005b34801561018757600080fd5b506101a2600480360381019061019d919061315e565b611140565b005b6101be60048036038101906101b99190613090565b611465565b005b3480156101cc57600080fd5b506101e760048036038101906101e2919061315e565b612425565b005b3480156101f557600080fd5b506101fe612749565b6040516102159b9a99989796959493929190613b7b565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a690613ce6565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f8c153ecee6895f15da72e646b4029e0ef7cbf971986d8d9cfe48c5563d368e908184604051610346929190613b52565b60405180910390a16001915050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dd90613ce6565b60405180910390fd5b60006103f0610aa5565b90506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23cc21c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561045c57600080fd5b505afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190613067565b90506001600801546001600701540142116104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db90613d46565b60405180910390fd5b600080600090505b60018001805490508110156107b65760009150600060018001828154811061051057fe5b90600052602060002090600402016002015490505b60018001828154811061053457fe5b9060005260206000209060040201600301805490508110156105975760018001828154811061055f57fe5b9060005260206000209060040201600301818154811061057b57fe5b9060005260206000200154830192508080600101915050610525565b506001800181815481106105a757fe5b906000526020600020906004020160000160009054906101000a900460ff161561067c578273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610611573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d8460405161066f9190613e26565b60405180910390a36107a9565b60018001818154811061068b57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610702573d6000803e3d6000fd5b5060018001818154811061071257fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d846040516107a09190613e26565b60405180910390a35b80806001019150506104ec565b5060005b600160020180549050811015610a8b57600091506000600160020182815481106107e057fe5b90600052602060002090600402016002015490505b6001600201828154811061080557fe5b906000526020600020906004020160030180549050811015610869576001600201828154811061083157fe5b9060005260206000209060040201600301818154811061084d57fe5b90600052602060002001548301925080806001019150506107f5565b506001600201818154811061087a57fe5b906000526020600020906004020160000160009054906101000a900460ff161561094f578273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156108e4573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d846040516109429190613e26565b60405180910390a3610a7e565b6001600201818154811061095f57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156109d6573d6000803e3d6000fd5b50600160020181815481106109e757fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d84604051610a759190613e26565b60405180910390a35b80806001019150506107ba565b508273ffffffffffffffffffffffffffffffffffffffff16ff5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610ad9610aa5565b90506000610ae633612b75565b90508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b285750600180018054905081105b610b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5e90613d66565b60405180910390fd5b6001800180549050811015610d685760003086604051602001610b8b929190613af4565b604051602081830303815290604052805190602001209050600080600180018054905090508651811015610bbe57600080fd5b60005b8751811015610d1357600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319045a25858a8481518110610c1557fe5b60200260200101516040518363ffffffff1660e01b8152600401610c3a929190613c56565b60206040518083038186803b158015610c5257600080fd5b505afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a9190613067565b73ffffffffffffffffffffffffffffffffffffffff16600180018281548110610caf57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d065782806001019350505b8080600101915050610bc1565b5060038160020281610d2157fe5b04821015610d64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5b90613d86565b60405180910390fd5b5050505b60005b8551811015610f3f57600160020180549050610d99878381518110610d8c57fe5b6020026020010151612c27565b1015610da457610f32565b610dac612cdc565b868281518110610db857fe5b6020026020010151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160060154816040018181525050600160020181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155606082015181600201556080820151816003019080519060200190610ecc929190612d23565b5050503373ffffffffffffffffffffffffffffffffffffffff167fa35ad2ad5abe8a31481d418a51abda97be91ba2616927300d0b75a0c340e3307888481518110610f1357fe5b6020026020010151604051610f289190613b37565b60405180910390a2505b8080600101915050610d6b565b5060019250505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd190613ce6565b60405180910390fd5b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372857ce26040518163ffffffff1660e01b815260040160206040518083038186803b15801561104457600080fd5b505afa158015611058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107c919061321e565b905080156110bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b690613d26565b60405180910390fd5b600082116110cc57600080fd5b60008260016007015401905060016007015481116110e957600080fd5b8260016003015401600160030181905550806001600701819055507f890f3f02e32798c719ac4ee5a0fe9b2a4f8bface63737206f954ee6c2b8379ef836040516111339190613e26565b60405180910390a1505050565b600160070154421115611188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117f90613c86565b60405180910390fd5b600061119333612b75565b9050600180018054905081106111de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d590613da6565b60405180910390fd5b60006111e984612c27565b90506001600201805490508110611235576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122c90613ca6565b60405180910390fd5b6000308560405160200161124a929190613a4b565b60405160208183030381529060405280519060200120905060008060018001805490509050855181101561127d57600080fd5b60005b86518110156113d257600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319045a25858984815181106112d457fe5b60200260200101516040518363ffffffff1660e01b81526004016112f9929190613c56565b60206040518083038186803b15801561131157600080fd5b505afa158015611325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113499190613067565b73ffffffffffffffffffffffffffffffffffffffff1660018001828154811061136e57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156113c55782806001019350505b8080600101915050611280565b50600381600202816113e057fe5b04821015611423576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141a90613d86565b60405180910390fd5b600180600201858154811061143457fe5b906000526020600020906004020160000160006101000a81548160ff02191690831515021790555050505050505050565b600061147033612b75565b9050600180018054905081106114bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b290613da6565b60405180910390fd5b60006114c689612c27565b90506001600201805490508110611512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150990613ca6565b60405180910390fd5b866001600201828154811061152357fe5b90600052602060002090600402016001015414611575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156c90613cc6565b60405180910390fd5b60016007015486880111156115bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b690613e06565b60405180910390fd5b6000308a89898c8a8a6040516020016115de9796959493929190613a77565b6040516020818303038152906040528051906020012090506000845160018001805490501015611643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163a90613de6565b60405180910390fd5b60008093505b855184101561179e57600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319045a258488878151811061169d57fe5b60200260200101516040518363ffffffff1660e01b81526004016116c2929190613c56565b60206040518083038186803b1580156116da57600080fd5b505afa1580156116ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117129190613067565b905060018001848154811061172357fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117915781806001019250505b8380600101945050611649565b60036001800180549050600202816117b257fe5b048210156117f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ec90613d86565b60405180910390fd5b6117fe8c612c27565b9350888a016001600201858154811061181357fe5b9060005260206000209060040201600101819055508a600160090154016001600901819055506000915060006001600201858154811061184f57fe5b90600052602060002090600402016002015490506001600201858154811061187357fe5b90600052602060002090600402016003018054905095506001600801548602600160060154018b1080156118a657508581105b15611904576009600a8d816118b757fe5b0402600160020186815481106118c957fe5b906000526020600020906004020160030160018803815481106118e857fe5b906000526020600020016000828254019250508190555061195a565b6001600201858154811061191457fe5b90600052602060002090600402016003016009600a8e8161193157fe5b040290806001815401808255809150506001900390600052602060002001600090919091909150555b6001600201858154811061196a57fe5b90600052602060002090600402016003018054905095506001600201858154811061199157fe5b906000526020600020906004020160000160009054906101000a900460ff16611cc457600160080154600382010260016006015401421115611b5e57600160020185815481106119dd57fe5b906000526020600020906004020160030181815481106119f957fe5b90600052602060002001546001600901540360016009018190555060016002018581548110611a2457fe5b9060005260206000209060040201600201600081548092919060010191905055508c73ffffffffffffffffffffffffffffffffffffffff166108fc60016002018781548110611a6f57fe5b90600052602060002090600402016003018381548110611a8b57fe5b90600052602060002001549081150290604051600060405180830381858888f19350505050158015611ac1573d6000803e3d6000fd5b508c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d60016002018881548110611b2157fe5b90600052602060002090600402016003018481548110611b3d57fe5b9060005260206000200154604051611b559190613e26565b60405180910390a35b6001600701544210611cc35760016002018581548110611b7a57fe5b90600052602060002090600402016002015490505b85811015611bdf5760016002018581548110611ba757fe5b90600052602060002090600402016003018181548110611bc357fe5b9060005260206000200154830192508080600101915050611b8f565b82600160090154036001600901819055508560016002018681548110611c0157fe5b9060005260206000209060040201600201819055508c73ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611c5c573d6000803e3d6000fd5b508c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d85604051611cba9190613e26565b60405180910390a35b5b600094505b60018001805490508510156122cb57600180018581548110611ce757fe5b9060005260206000209060040201600201549050600180018581548110611d0a57fe5b90600052602060002090600402016003018054905095506001600801548602600160060154018b108015611d3d57508581105b15611dcf5787600180018054905081518110611d5557fe5b6020026020010151888681518110611d6957fe5b6020026020010151600a8e81611d7b57fe5b040281611d8457fe5b04600180018681548110611d9457fe5b90600052602060002090600402016003016001880381548110611db357fe5b9060005260206000200160008282540192505081905550611e59565b600180018581548110611dde57fe5b906000526020600020906004020160030188600180018054905081518110611e0257fe5b6020026020010151898781518110611e1657fe5b6020026020010151600a8f81611e2857fe5b040281611e3157fe5b0490806001815401808255809150506001900390600052602060002001600090919091909150555b600180018581548110611e6857fe5b9060005260206000209060040201600301805490509550600180018581548110611e8e57fe5b906000526020600020906004020160000160009054906101000a900460ff166122be576001600801546003820102600160060154014211156120d757600180018581548110611ed957fe5b90600052602060002090600402016003018181548110611ef557fe5b906000526020600020015460016009015403600160090181905550600180018581548110611f1f57fe5b906000526020600020906004020160020160008154809291906001019190505550600180018581548110611f4f57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600180018781548110611fa957fe5b90600052602060002090600402016003018381548110611fc557fe5b90600052602060002001549081150290604051600060405180830381858888f19350505050158015611ffb573d6000803e3d6000fd5b5060018001858154811061200b57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d60018001888154811061209a57fe5b906000526020600020906004020160030184815481106120b657fe5b90600052602060002001546040516120ce9190613e26565b60405180910390a35b60016007015442106122bd57600092506001800185815481106120f657fe5b90600052602060002090600402016002015490505b8581101561215a5760018001858154811061212257fe5b9060005260206000209060040201600301818154811061213e57fe5b906000526020600020015483019250808060010191505061210b565b82600160090154036001600901819055508560018001868154811061217b57fe5b90600052602060002090600402016002018190555060018001858154811061219f57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015612216573d6000803e3d6000fd5b5060018001858154811061222657fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d856040516122b49190613e26565b60405180910390a35b5b8480600101955050611cc9565b6122d3612d70565b6040518060c001604052808d81526020018c81526020018e81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018f73ffffffffffffffffffffffffffffffffffffffff1681526020018b81525090506001600a0181908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015550505050505050505050505050505050565b60016007015442111561246d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246490613d06565b60405180910390fd5b600061247833612b75565b9050600180018054905081106124c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ba90613da6565b60405180910390fd5b60006124ce84612b75565b905060018001805490508110612519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251090613dc6565b60405180910390fd5b6000308560405160200161252e929190613a4b565b60405160208183030381529060405280519060200120905060008060018001805490509050855181101561256157600080fd5b60005b86518110156126b657600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319045a25858984815181106125b857fe5b60200260200101516040518363ffffffff1660e01b81526004016125dd929190613c56565b60206040518083038186803b1580156125f557600080fd5b505afa158015612609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262d9190613067565b73ffffffffffffffffffffffffffffffffffffffff1660018001828154811061265257fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156126a95782806001019350505b8080600101915050612564565b50600381600202816126c457fe5b04821015612707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126fe90613d86565b60405180910390fd5b600180600101858154811061271857fe5b906000526020600020906004020160000160006101000a81548160ff02191690831515021790555050505050505050565b600060608060008060008060008060006060600160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001800160016002016001600301546001600401546001600501546001600601546001600701546001600801546001600901546001600a0189805480602002602001604051908101604052809291908181526020016000905b828210156128e957838290600052602060002090600402016040518060a00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156128d157602002820191906000526020600020905b8154815260200190600101908083116128bd575b505050505081525050815260200190600101906127da565b50505050995088805480602002602001604051908101604052809291908181526020016000905b82821015612a1f57838290600052602060002090600402016040518060a00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015612a0757602002820191906000526020600020905b8154815260200190600101908083116129f3575b50505050508152505081526020019060010190612910565b50505050985080805480602002602001604051908101604052809291908181526020016000905b82821015612b4c57838290600052602060002090600602016040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152505081526020019060010190612a46565b5050505090509a509a509a509a509a509a509a509a509a509a509a50909192939495969798999a565b600080600090505b6001800180549050811015612c1657600180018181548110612b9b57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612c095780915050612c22565b8080600101915050612b7d565b50600180018054905090505b919050565b600080600090505b600160020180549050811015612cca5760016002018181548110612c4f57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612cbd5780915050612cd7565b8080600101915050612c2f565b5060016002018054905090505b919050565b6040518060a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b828054828255906000526020600020908101928215612d5f579160200282015b82811115612d5e578251825591602001919060010190612d43565b5b509050612d6c9190612dd5565b5090565b6040518060c00160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681525090565b5b80821115612dee576000816000905550600101612dd6565b5090565b600081359050612e0181614182565b92915050565b600081519050612e1681614182565b92915050565b600081359050612e2b81614199565b92915050565b600082601f830112612e4257600080fd5b8135612e55612e5082613e72565b613e41565b91508181835260208401935060208101905083856020840282011115612e7a57600080fd5b60005b83811015612eaa5781612e908882612e1c565b845260208401935060208301925050600181019050612e7d565b5050505092915050565b600082601f830112612ec557600080fd5b8135612ed8612ed382613e9e565b613e41565b9150818183526020840193506020810190508360005b83811015612f1e5781358601612f048882612fd5565b845260208401935060208301925050600181019050612eee565b5050505092915050565b600082601f830112612f3957600080fd5b8135612f4c612f4782613eca565b613e41565b91508181835260208401935060208101905083856020840282011115612f7157600080fd5b60005b83811015612fa15781612f878882613029565b845260208401935060208301925050600181019050612f74565b5050505092915050565b600081519050612fba816141b0565b92915050565b600081359050612fcf816141c7565b92915050565b600082601f830112612fe657600080fd5b8135612ff9612ff482613ef6565b613e41565b9150808252602083016020830185838301111561301557600080fd5b6130208382846140d6565b50505092915050565b600081359050613038816141de565b92915050565b60006020828403121561305057600080fd5b600061305e84828501612df2565b91505092915050565b60006020828403121561307957600080fd5b600061308784828501612e07565b91505092915050565b600080600080600080600060e0888a0312156130ab57600080fd5b60006130b98a828b01612e1c565b97505060206130ca8a828b01613029565b96505060406130db8a828b01613029565b95505060606130ec8a828b01613029565b94505060806130fd8a828b01612fc0565b93505060a088013567ffffffffffffffff81111561311a57600080fd5b6131268a828b01612f28565b92505060c088013567ffffffffffffffff81111561314357600080fd5b61314f8a828b01612eb4565b91505092959891949750929550565b6000806040838503121561317157600080fd5b600061317f85828601612df2565b925050602083013567ffffffffffffffff81111561319c57600080fd5b6131a885828601612eb4565b9150509250929050565b600080604083850312156131c557600080fd5b600083013567ffffffffffffffff8111156131df57600080fd5b6131eb85828601612e31565b925050602083013567ffffffffffffffff81111561320857600080fd5b61321485828601612eb4565b9150509250929050565b60006020828403121561323057600080fd5b600061323e84828501612fab565b91505092915050565b60006020828403121561325957600080fd5b600061326784828501613029565b91505092915050565b600061327c8383613302565b60208301905092915050565b60006132948383613916565b905092915050565b60006132a8838361398c565b60c08301905092915050565b60006132c08383613a07565b60208301905092915050565b60006132d88383613a25565b60208301905092915050565b6132ed816140a0565b82525050565b6132fc8161404e565b82525050565b61330b8161404e565b82525050565b61332261331d8261404e565b61412a565b82525050565b6133318161403c565b82525050565b6133408161403c565b82525050565b6133576133528261403c565b614118565b82525050565b600061336882613f66565b6133728185613fd1565b935061337d83613f26565b8060005b838110156133ae5781516133958882613270565b97506133a083613f9d565b925050600181019050613381565b5085935050505092915050565b60006133c682613f71565b6133d08185613fdc565b9350836020820285016133e285613f36565b8060005b8581101561341e57848403895281516133ff8582613288565b945061340a83613faa565b925060208a019950506001810190506133e6565b50829750879550505050505092915050565b600061343b82613f7c565b6134458185613fed565b935061345083613f46565b8060005b83811015613481578151613468888261329c565b975061347383613fb7565b925050600181019050613454565b5085935050505092915050565b600061349982613f87565b6134a38185613ffe565b93506134ae83613f56565b8060005b838110156134df5781516134c688826132b4565b97506134d183613fc4565b9250506001810190506134b2565b5085935050505092915050565b60006134f782613f87565b613501818561400f565b935061350c83613f56565b8060005b8381101561353d57815161352488826132cc565b975061352f83613fc4565b925050600181019050613510565b5085935050505092915050565b61355381614060565b82525050565b61356281614060565b82525050565b6135718161406c565b82525050565b6135808161406c565b82525050565b6135976135928261406c565b61413c565b82525050565b60006135a882613f92565b6135b2818561401a565b93506135c28185602086016140e5565b6135cb81614164565b840191505092915050565b60006135e3600e8361402b565b91507f54696d65206973206578636565640000000000000000000000000000000000006000830152602082019050919050565b600061362360108361402b565b91507f696c6c6567616c2070726f7669646572000000000000000000000000000000006000830152602082019050919050565b6000613663600f8361402b565b91507f696c6c6567616c207374537461727400000000000000000000000000000000006000830152602082019050919050565b60006136a360138361402b565b91507f6f6e6c79206f776e65722063616e2063616c6c000000000000000000000000006000830152602082019050919050565b60006136e3600e8361402b565b91507f74696d65206973206578636565640000000000000000000000000000000000006000830152602082019050919050565b600061372360148361402b565b91507f657874656e6454696d652069732062616e6e65640000000000000000000000006000830152602082019050919050565b6000613763600e8361402b565b91507f54696d65206973206e6f742075700000000000000000000000000000000000006000830152602082019050919050565b60006137a3600e8361402b565b91507f696c6c6567616c2063616c6c65720000000000000000000000000000000000006000830152602082019050919050565b60006137e3601c8361402b565b91507f696e73756666696369656e74206c6567616c207369676e6174757265000000006000830152602082019050919050565b600061382360148361402b565b91507f6f6e6c79206b65657065722063616e2063616c6c0000000000000000000000006000830152602082019050919050565b6000613863600e8361402b565b91507f696c6c6567616c206b65657065720000000000000000000000000000000000006000830152602082019050919050565b60006138a3600d8361402b565b91507f746f6f206d756368207369676e000000000000000000000000000000000000006000830152602082019050919050565b60006138e360148361402b565b91507f73744c656e677468206578636565642074696d650000000000000000000000006000830152602082019050919050565b600060a08301600083015161392e600086018261354a565b50602083015161394160208601826132f3565b5060408301516139546040860182613a07565b5060608301516139676060860182613a07565b506080830151848203608086015261397f828261348e565b9150508091505092915050565b60c0820160008201516139a26000850182613a07565b5060208201516139b56020850182613a07565b5060408201516139c86040850182613a07565b5060608201516139db6060850182613328565b5060808201516139ee6080850182613328565b5060a0820151613a0160a0850182613568565b50505050565b613a1081614096565b82525050565b613a1f81614096565b82525050565b613a2e81614096565b82525050565b613a45613a4082614096565b614158565b82525050565b6000613a578285613311565b601482019150613a678284613346565b6014820191508190509392505050565b6000613a83828a613311565b601482019150613a938289613311565b601482019150613aa38288613a34565b602082019150613ab38287613a34565b602082019150613ac38286613a34565b602082019150613ad38285613586565b602082019150613ae382846134ec565b915081905098975050505050505050565b6000613b008285613311565b601482019150613b10828461335d565b91508190509392505050565b6000602082019050613b316000830184613337565b92915050565b6000602082019050613b4c60008301846132e4565b92915050565b6000604082019050613b676000830185613337565b613b746020830184613337565b9392505050565b600061016082019050613b91600083018e613337565b8181036020830152613ba3818d6133bb565b90508181036040830152613bb7818c6133bb565b9050613bc6606083018b613a16565b613bd3608083018a613a16565b613be060a0830189613a16565b613bed60c0830188613a16565b613bfa60e0830187613a16565b613c08610100830186613a16565b613c16610120830185613a16565b818103610140830152613c298184613430565b90509c9b505050505050505050505050565b6000602082019050613c506000830184613559565b92915050565b6000604082019050613c6b6000830185613577565b8181036020830152613c7d818461359d565b90509392505050565b60006020820190508181036000830152613c9f816135d6565b9050919050565b60006020820190508181036000830152613cbf81613616565b9050919050565b60006020820190508181036000830152613cdf81613656565b9050919050565b60006020820190508181036000830152613cff81613696565b9050919050565b60006020820190508181036000830152613d1f816136d6565b9050919050565b60006020820190508181036000830152613d3f81613716565b9050919050565b60006020820190508181036000830152613d5f81613756565b9050919050565b60006020820190508181036000830152613d7f81613796565b9050919050565b60006020820190508181036000830152613d9f816137d6565b9050919050565b60006020820190508181036000830152613dbf81613816565b9050919050565b60006020820190508181036000830152613ddf81613856565b9050919050565b60006020820190508181036000830152613dff81613896565b9050919050565b60006020820190508181036000830152613e1f816138d6565b9050919050565b6000602082019050613e3b6000830184613a16565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613e6857613e67614162565b5b8060405250919050565b600067ffffffffffffffff821115613e8d57613e8c614162565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613eb957613eb8614162565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613ee557613ee4614162565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613f1157613f10614162565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061404782614076565b9050919050565b600061405982614076565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006140ab826140b2565b9050919050565b60006140bd826140c4565b9050919050565b60006140cf82614076565b9050919050565b82818337600083830152505050565b60005b838110156141035780820151818401526020810190506140e8565b83811115614112576000848401525b50505050565b600061412382614146565b9050919050565b600061413582614146565b9050919050565b6000819050919050565b600061415182614175565b9050919050565b6000819050919050565bfe5b6000601f19601f8301169050919050565b60008160601b9050919050565b61418b8161403c565b811461419657600080fd5b50565b6141a28161404e565b81146141ad57600080fd5b50565b6141b981614060565b81146141c457600080fd5b50565b6141d08161406c565b81146141db57600080fd5b50565b6141e781614096565b81146141f257600080fd5b5056fea2646970667358221220d5c6103e08b898b31262599badc61d11c7349c50dcfbf89498d07e38a7c2d83964736f6c63430007030033"

// DeployUpKeeping deploys a new Ethereum contract, binding an instance of UpKeeping to it.
func DeployUpKeeping(auth *bind.TransactOpts, backend bind.ContractBackend, _query common.Address, _keepers []common.Address, _providers []common.Address, _time *big.Int, _size *big.Int, _price *big.Int, _cycle *big.Int) (common.Address, *types.Transaction, *UpKeeping, error) {
	parsed, err := abi.JSON(strings.NewReader(UpKeepingABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(UpKeepingBin), backend, _query, _keepers, _providers, _time, _size, _price, _cycle)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UpKeeping{UpKeepingCaller: UpKeepingCaller{contract: contract}, UpKeepingTransactor: UpKeepingTransactor{contract: contract}, UpKeepingFilterer: UpKeepingFilterer{contract: contract}}, nil
}

// UpKeeping is an auto generated Go binding around an Ethereum contract.
type UpKeeping struct {
	UpKeepingCaller     // Read-only binding to the contract
	UpKeepingTransactor // Write-only binding to the contract
	UpKeepingFilterer   // Log filterer for contract events
}

// UpKeepingCaller is an auto generated read-only Go binding around an Ethereum contract.
type UpKeepingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpKeepingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UpKeepingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpKeepingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UpKeepingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpKeepingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UpKeepingSession struct {
	Contract     *UpKeeping        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UpKeepingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UpKeepingCallerSession struct {
	Contract *UpKeepingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// UpKeepingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UpKeepingTransactorSession struct {
	Contract     *UpKeepingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// UpKeepingRaw is an auto generated low-level Go binding around an Ethereum contract.
type UpKeepingRaw struct {
	Contract *UpKeeping // Generic contract binding to access the raw methods on
}

// UpKeepingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UpKeepingCallerRaw struct {
	Contract *UpKeepingCaller // Generic read-only contract binding to access the raw methods on
}

// UpKeepingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UpKeepingTransactorRaw struct {
	Contract *UpKeepingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUpKeeping creates a new instance of UpKeeping, bound to a specific deployed contract.
func NewUpKeeping(address common.Address, backend bind.ContractBackend) (*UpKeeping, error) {
	contract, err := bindUpKeeping(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UpKeeping{UpKeepingCaller: UpKeepingCaller{contract: contract}, UpKeepingTransactor: UpKeepingTransactor{contract: contract}, UpKeepingFilterer: UpKeepingFilterer{contract: contract}}, nil
}

// NewUpKeepingCaller creates a new read-only instance of UpKeeping, bound to a specific deployed contract.
func NewUpKeepingCaller(address common.Address, caller bind.ContractCaller) (*UpKeepingCaller, error) {
	contract, err := bindUpKeeping(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UpKeepingCaller{contract: contract}, nil
}

// NewUpKeepingTransactor creates a new write-only instance of UpKeeping, bound to a specific deployed contract.
func NewUpKeepingTransactor(address common.Address, transactor bind.ContractTransactor) (*UpKeepingTransactor, error) {
	contract, err := bindUpKeeping(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UpKeepingTransactor{contract: contract}, nil
}

// NewUpKeepingFilterer creates a new log filterer instance of UpKeeping, bound to a specific deployed contract.
func NewUpKeepingFilterer(address common.Address, filterer bind.ContractFilterer) (*UpKeepingFilterer, error) {
	contract, err := bindUpKeeping(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UpKeepingFilterer{contract: contract}, nil
}

// bindUpKeeping binds a generic wrapper to an already deployed contract.
func bindUpKeeping(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UpKeepingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpKeeping *UpKeepingRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UpKeeping.Contract.UpKeepingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpKeeping *UpKeepingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpKeeping.Contract.UpKeepingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpKeeping *UpKeepingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpKeeping.Contract.UpKeepingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpKeeping *UpKeepingCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UpKeeping.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpKeeping *UpKeepingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpKeeping.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpKeeping *UpKeepingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpKeeping.Contract.contract.Transact(opts, method, params...)
}

// GetOrder is a free data retrieval call binding the contract method 0xd36dedd2.
//
// Solidity: function getOrder() view returns(address, (bool,address,uint256,uint256,uint256[])[], (bool,address,uint256,uint256,uint256[])[], uint256, uint256, uint256, uint256, uint256, uint256, uint256, (uint256,uint256,uint256,address,address,bytes32)[])
func (_UpKeeping *UpKeepingCaller) GetOrder(opts *bind.CallOpts) (common.Address, []UpKeepingKPInfo, []UpKeepingKPInfo, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, []UpKeepingProof, error) {
	var (
		ret0  = new(common.Address)
		ret1  = new([]UpKeepingKPInfo)
		ret2  = new([]UpKeepingKPInfo)
		ret3  = new(*big.Int)
		ret4  = new(*big.Int)
		ret5  = new(*big.Int)
		ret6  = new(*big.Int)
		ret7  = new(*big.Int)
		ret8  = new(*big.Int)
		ret9  = new(*big.Int)
		ret10 = new([]UpKeepingProof)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
		ret5,
		ret6,
		ret7,
		ret8,
		ret9,
		ret10,
	}
	err := _UpKeeping.contract.Call(opts, out, "getOrder")
	return *ret0, *ret1, *ret2, *ret3, *ret4, *ret5, *ret6, *ret7, *ret8, *ret9, *ret10, err
}

// GetOrder is a free data retrieval call binding the contract method 0xd36dedd2.
//
// Solidity: function getOrder() view returns(address, (bool,address,uint256,uint256,uint256[])[], (bool,address,uint256,uint256,uint256[])[], uint256, uint256, uint256, uint256, uint256, uint256, uint256, (uint256,uint256,uint256,address,address,bytes32)[])
func (_UpKeeping *UpKeepingSession) GetOrder() (common.Address, []UpKeepingKPInfo, []UpKeepingKPInfo, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, []UpKeepingProof, error) {
	return _UpKeeping.Contract.GetOrder(&_UpKeeping.CallOpts)
}

// GetOrder is a free data retrieval call binding the contract method 0xd36dedd2.
//
// Solidity: function getOrder() view returns(address, (bool,address,uint256,uint256,uint256[])[], (bool,address,uint256,uint256,uint256[])[], uint256, uint256, uint256, uint256, uint256, uint256, uint256, (uint256,uint256,uint256,address,address,bytes32)[])
func (_UpKeeping *UpKeepingCallerSession) GetOrder() (common.Address, []UpKeepingKPInfo, []UpKeepingKPInfo, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, []UpKeepingProof, error) {
	return _UpKeeping.Contract.GetOrder(&_UpKeeping.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_UpKeeping *UpKeepingCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _UpKeeping.contract.Call(opts, out, "getOwner")
	return *ret0, err
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_UpKeeping *UpKeepingSession) GetOwner() (common.Address, error) {
	return _UpKeeping.Contract.GetOwner(&_UpKeeping.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_UpKeeping *UpKeepingCallerSession) GetOwner() (common.Address, error) {
	return _UpKeeping.Contract.GetOwner(&_UpKeeping.CallOpts)
}

// AddProvider is a paid mutator transaction binding the contract method 0x8b296788.
//
// Solidity: function addProvider(address[] _providers, bytes[] sign) returns(bool)
func (_UpKeeping *UpKeepingTransactor) AddProvider(opts *bind.TransactOpts, _providers []common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "addProvider", _providers, sign)
}

// AddProvider is a paid mutator transaction binding the contract method 0x8b296788.
//
// Solidity: function addProvider(address[] _providers, bytes[] sign) returns(bool)
func (_UpKeeping *UpKeepingSession) AddProvider(_providers []common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.AddProvider(&_UpKeeping.TransactOpts, _providers, sign)
}

// AddProvider is a paid mutator transaction binding the contract method 0x8b296788.
//
// Solidity: function addProvider(address[] _providers, bytes[] sign) returns(bool)
func (_UpKeeping *UpKeepingTransactorSession) AddProvider(_providers []common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.AddProvider(&_UpKeeping.TransactOpts, _providers, sign)
}

// AlterOwner is a paid mutator transaction binding the contract method 0x0ca05f9f.
//
// Solidity: function alterOwner(address newOwner) returns(bool)
func (_UpKeeping *UpKeepingTransactor) AlterOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "alterOwner", newOwner)
}

// AlterOwner is a paid mutator transaction binding the contract method 0x0ca05f9f.
//
// Solidity: function alterOwner(address newOwner) returns(bool)
func (_UpKeeping *UpKeepingSession) AlterOwner(newOwner common.Address) (*types.Transaction, error) {
	return _UpKeeping.Contract.AlterOwner(&_UpKeeping.TransactOpts, newOwner)
}

// AlterOwner is a paid mutator transaction binding the contract method 0x0ca05f9f.
//
// Solidity: function alterOwner(address newOwner) returns(bool)
func (_UpKeeping *UpKeepingTransactorSession) AlterOwner(newOwner common.Address) (*types.Transaction, error) {
	return _UpKeeping.Contract.AlterOwner(&_UpKeeping.TransactOpts, newOwner)
}

// Destruct is a paid mutator transaction binding the contract method 0x2b68b9c6.
//
// Solidity: function destruct() returns()
func (_UpKeeping *UpKeepingTransactor) Destruct(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "destruct")
}

// Destruct is a paid mutator transaction binding the contract method 0x2b68b9c6.
//
// Solidity: function destruct() returns()
func (_UpKeeping *UpKeepingSession) Destruct() (*types.Transaction, error) {
	return _UpKeeping.Contract.Destruct(&_UpKeeping.TransactOpts)
}

// Destruct is a paid mutator transaction binding the contract method 0x2b68b9c6.
//
// Solidity: function destruct() returns()
func (_UpKeeping *UpKeepingTransactorSession) Destruct() (*types.Transaction, error) {
	return _UpKeeping.Contract.Destruct(&_UpKeeping.TransactOpts)
}

// ExtendTime is a paid mutator transaction binding the contract method 0xa27aebbc.
//
// Solidity: function extendTime(uint256 addTime) returns()
func (_UpKeeping *UpKeepingTransactor) ExtendTime(opts *bind.TransactOpts, addTime *big.Int) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "extendTime", addTime)
}

// ExtendTime is a paid mutator transaction binding the contract method 0xa27aebbc.
//
// Solidity: function extendTime(uint256 addTime) returns()
func (_UpKeeping *UpKeepingSession) ExtendTime(addTime *big.Int) (*types.Transaction, error) {
	return _UpKeeping.Contract.ExtendTime(&_UpKeeping.TransactOpts, addTime)
}

// ExtendTime is a paid mutator transaction binding the contract method 0xa27aebbc.
//
// Solidity: function extendTime(uint256 addTime) returns()
func (_UpKeeping *UpKeepingTransactorSession) ExtendTime(addTime *big.Int) (*types.Transaction, error) {
	return _UpKeeping.Contract.ExtendTime(&_UpKeeping.TransactOpts, addTime)
}

// SetKeeperStop is a paid mutator transaction binding the contract method 0xd187ec03.
//
// Solidity: function setKeeperStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingTransactor) SetKeeperStop(opts *bind.TransactOpts, _addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "setKeeperStop", _addr, sign)
}

// SetKeeperStop is a paid mutator transaction binding the contract method 0xd187ec03.
//
// Solidity: function setKeeperStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingSession) SetKeeperStop(_addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SetKeeperStop(&_UpKeeping.TransactOpts, _addr, sign)
}

// SetKeeperStop is a paid mutator transaction binding the contract method 0xd187ec03.
//
// Solidity: function setKeeperStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingTransactorSession) SetKeeperStop(_addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SetKeeperStop(&_UpKeeping.TransactOpts, _addr, sign)
}

// SetProviderStop is a paid mutator transaction binding the contract method 0xd0620876.
//
// Solidity: function setProviderStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingTransactor) SetProviderStop(opts *bind.TransactOpts, _addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "setProviderStop", _addr, sign)
}

// SetProviderStop is a paid mutator transaction binding the contract method 0xd0620876.
//
// Solidity: function setProviderStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingSession) SetProviderStop(_addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SetProviderStop(&_UpKeeping.TransactOpts, _addr, sign)
}

// SetProviderStop is a paid mutator transaction binding the contract method 0xd0620876.
//
// Solidity: function setProviderStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingTransactorSession) SetProviderStop(_addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SetProviderStop(&_UpKeeping.TransactOpts, _addr, sign)
}

// SpaceTimePay is a paid mutator transaction binding the contract method 0xd063e733.
//
// Solidity: function spaceTimePay(address _provider, uint256 _stValue, uint256 _stStart, uint256 _stLength, bytes32 _merkle_root, uint256[] share, bytes[] sign) payable returns()
func (_UpKeeping *UpKeepingTransactor) SpaceTimePay(opts *bind.TransactOpts, _provider common.Address, _stValue *big.Int, _stStart *big.Int, _stLength *big.Int, _merkle_root [32]byte, share []*big.Int, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "spaceTimePay", _provider, _stValue, _stStart, _stLength, _merkle_root, share, sign)
}

// SpaceTimePay is a paid mutator transaction binding the contract method 0xd063e733.
//
// Solidity: function spaceTimePay(address _provider, uint256 _stValue, uint256 _stStart, uint256 _stLength, bytes32 _merkle_root, uint256[] share, bytes[] sign) payable returns()
func (_UpKeeping *UpKeepingSession) SpaceTimePay(_provider common.Address, _stValue *big.Int, _stStart *big.Int, _stLength *big.Int, _merkle_root [32]byte, share []*big.Int, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SpaceTimePay(&_UpKeeping.TransactOpts, _provider, _stValue, _stStart, _stLength, _merkle_root, share, sign)
}

// SpaceTimePay is a paid mutator transaction binding the contract method 0xd063e733.
//
// Solidity: function spaceTimePay(address _provider, uint256 _stValue, uint256 _stStart, uint256 _stLength, bytes32 _merkle_root, uint256[] share, bytes[] sign) payable returns()
func (_UpKeeping *UpKeepingTransactorSession) SpaceTimePay(_provider common.Address, _stValue *big.Int, _stStart *big.Int, _stLength *big.Int, _merkle_root [32]byte, share []*big.Int, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SpaceTimePay(&_UpKeeping.TransactOpts, _provider, _stValue, _stStart, _stLength, _merkle_root, share, sign)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UpKeeping *UpKeepingTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpKeeping.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UpKeeping *UpKeepingSession) Receive() (*types.Transaction, error) {
	return _UpKeeping.Contract.Receive(&_UpKeeping.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UpKeeping *UpKeepingTransactorSession) Receive() (*types.Transaction, error) {
	return _UpKeeping.Contract.Receive(&_UpKeeping.TransactOpts)
}

// UpKeepingAddOrderIterator is returned from FilterAddOrder and is used to iterate over the raw logs and unpacked data for AddOrder events raised by the UpKeeping contract.
type UpKeepingAddOrderIterator struct {
	Event *UpKeepingAddOrder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingAddOrderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingAddOrder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingAddOrder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingAddOrderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingAddOrderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingAddOrder represents a AddOrder event raised by the UpKeeping contract.
type UpKeepingAddOrder struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAddOrder is a free log retrieval operation binding the contract event 0x0905316f7faca135c292b6e6f8d91c19128d372722215fe029e74e75ef84c087.
//
// Solidity: event AddOrder()
func (_UpKeeping *UpKeepingFilterer) FilterAddOrder(opts *bind.FilterOpts) (*UpKeepingAddOrderIterator, error) {

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "AddOrder")
	if err != nil {
		return nil, err
	}
	return &UpKeepingAddOrderIterator{contract: _UpKeeping.contract, event: "AddOrder", logs: logs, sub: sub}, nil
}

// WatchAddOrder is a free log subscription operation binding the contract event 0x0905316f7faca135c292b6e6f8d91c19128d372722215fe029e74e75ef84c087.
//
// Solidity: event AddOrder()
func (_UpKeeping *UpKeepingFilterer) WatchAddOrder(opts *bind.WatchOpts, sink chan<- *UpKeepingAddOrder) (event.Subscription, error) {

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "AddOrder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingAddOrder)
				if err := _UpKeeping.contract.UnpackLog(event, "AddOrder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddOrder is a log parse operation binding the contract event 0x0905316f7faca135c292b6e6f8d91c19128d372722215fe029e74e75ef84c087.
//
// Solidity: event AddOrder()
func (_UpKeeping *UpKeepingFilterer) ParseAddOrder(log types.Log) (*UpKeepingAddOrder, error) {
	event := new(UpKeepingAddOrder)
	if err := _UpKeeping.contract.UnpackLog(event, "AddOrder", log); err != nil {
		return nil, err
	}
	return event, nil
}

// UpKeepingAddProviderIterator is returned from FilterAddProvider and is used to iterate over the raw logs and unpacked data for AddProvider events raised by the UpKeeping contract.
type UpKeepingAddProviderIterator struct {
	Event *UpKeepingAddProvider // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingAddProviderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingAddProvider)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingAddProvider)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingAddProviderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingAddProviderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingAddProvider represents a AddProvider event raised by the UpKeeping contract.
type UpKeepingAddProvider struct {
	From     common.Address
	Provider common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAddProvider is a free log retrieval operation binding the contract event 0xa35ad2ad5abe8a31481d418a51abda97be91ba2616927300d0b75a0c340e3307.
//
// Solidity: event AddProvider(address indexed from, address provider)
func (_UpKeeping *UpKeepingFilterer) FilterAddProvider(opts *bind.FilterOpts, from []common.Address) (*UpKeepingAddProviderIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "AddProvider", fromRule)
	if err != nil {
		return nil, err
	}
	return &UpKeepingAddProviderIterator{contract: _UpKeeping.contract, event: "AddProvider", logs: logs, sub: sub}, nil
}

// WatchAddProvider is a free log subscription operation binding the contract event 0xa35ad2ad5abe8a31481d418a51abda97be91ba2616927300d0b75a0c340e3307.
//
// Solidity: event AddProvider(address indexed from, address provider)
func (_UpKeeping *UpKeepingFilterer) WatchAddProvider(opts *bind.WatchOpts, sink chan<- *UpKeepingAddProvider, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "AddProvider", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingAddProvider)
				if err := _UpKeeping.contract.UnpackLog(event, "AddProvider", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddProvider is a log parse operation binding the contract event 0xa35ad2ad5abe8a31481d418a51abda97be91ba2616927300d0b75a0c340e3307.
//
// Solidity: event AddProvider(address indexed from, address provider)
func (_UpKeeping *UpKeepingFilterer) ParseAddProvider(log types.Log) (*UpKeepingAddProvider, error) {
	event := new(UpKeepingAddProvider)
	if err := _UpKeeping.contract.UnpackLog(event, "AddProvider", log); err != nil {
		return nil, err
	}
	return event, nil
}

// UpKeepingAlterOwnerIterator is returned from FilterAlterOwner and is used to iterate over the raw logs and unpacked data for AlterOwner events raised by the UpKeeping contract.
type UpKeepingAlterOwnerIterator struct {
	Event *UpKeepingAlterOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingAlterOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingAlterOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingAlterOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingAlterOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingAlterOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingAlterOwner represents a AlterOwner event raised by the UpKeeping contract.
type UpKeepingAlterOwner struct {
	From common.Address
	To   common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAlterOwner is a free log retrieval operation binding the contract event 0x8c153ecee6895f15da72e646b4029e0ef7cbf971986d8d9cfe48c5563d368e90.
//
// Solidity: event AlterOwner(address from, address to)
func (_UpKeeping *UpKeepingFilterer) FilterAlterOwner(opts *bind.FilterOpts) (*UpKeepingAlterOwnerIterator, error) {

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "AlterOwner")
	if err != nil {
		return nil, err
	}
	return &UpKeepingAlterOwnerIterator{contract: _UpKeeping.contract, event: "AlterOwner", logs: logs, sub: sub}, nil
}

// WatchAlterOwner is a free log subscription operation binding the contract event 0x8c153ecee6895f15da72e646b4029e0ef7cbf971986d8d9cfe48c5563d368e90.
//
// Solidity: event AlterOwner(address from, address to)
func (_UpKeeping *UpKeepingFilterer) WatchAlterOwner(opts *bind.WatchOpts, sink chan<- *UpKeepingAlterOwner) (event.Subscription, error) {

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "AlterOwner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingAlterOwner)
				if err := _UpKeeping.contract.UnpackLog(event, "AlterOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlterOwner is a log parse operation binding the contract event 0x8c153ecee6895f15da72e646b4029e0ef7cbf971986d8d9cfe48c5563d368e90.
//
// Solidity: event AlterOwner(address from, address to)
func (_UpKeeping *UpKeepingFilterer) ParseAlterOwner(log types.Log) (*UpKeepingAlterOwner, error) {
	event := new(UpKeepingAlterOwner)
	if err := _UpKeeping.contract.UnpackLog(event, "AlterOwner", log); err != nil {
		return nil, err
	}
	return event, nil
}

// UpKeepingExtendTimeIterator is returned from FilterExtendTime and is used to iterate over the raw logs and unpacked data for ExtendTime events raised by the UpKeeping contract.
type UpKeepingExtendTimeIterator struct {
	Event *UpKeepingExtendTime // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingExtendTimeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingExtendTime)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingExtendTime)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingExtendTimeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingExtendTimeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingExtendTime represents a ExtendTime event raised by the UpKeeping contract.
type UpKeepingExtendTime struct {
	Time *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterExtendTime is a free log retrieval operation binding the contract event 0x890f3f02e32798c719ac4ee5a0fe9b2a4f8bface63737206f954ee6c2b8379ef.
//
// Solidity: event ExtendTime(uint256 time)
func (_UpKeeping *UpKeepingFilterer) FilterExtendTime(opts *bind.FilterOpts) (*UpKeepingExtendTimeIterator, error) {

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "ExtendTime")
	if err != nil {
		return nil, err
	}
	return &UpKeepingExtendTimeIterator{contract: _UpKeeping.contract, event: "ExtendTime", logs: logs, sub: sub}, nil
}

// WatchExtendTime is a free log subscription operation binding the contract event 0x890f3f02e32798c719ac4ee5a0fe9b2a4f8bface63737206f954ee6c2b8379ef.
//
// Solidity: event ExtendTime(uint256 time)
func (_UpKeeping *UpKeepingFilterer) WatchExtendTime(opts *bind.WatchOpts, sink chan<- *UpKeepingExtendTime) (event.Subscription, error) {

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "ExtendTime")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingExtendTime)
				if err := _UpKeeping.contract.UnpackLog(event, "ExtendTime", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExtendTime is a log parse operation binding the contract event 0x890f3f02e32798c719ac4ee5a0fe9b2a4f8bface63737206f954ee6c2b8379ef.
//
// Solidity: event ExtendTime(uint256 time)
func (_UpKeeping *UpKeepingFilterer) ParseExtendTime(log types.Log) (*UpKeepingExtendTime, error) {
	event := new(UpKeepingExtendTime)
	if err := _UpKeeping.contract.UnpackLog(event, "ExtendTime", log); err != nil {
		return nil, err
	}
	return event, nil
}

// UpKeepingPayIterator is returned from FilterPay and is used to iterate over the raw logs and unpacked data for Pay events raised by the UpKeeping contract.
type UpKeepingPayIterator struct {
	Event *UpKeepingPay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingPayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingPay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingPay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingPayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingPayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingPay represents a Pay event raised by the UpKeeping contract.
type UpKeepingPay struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterPay is a free log retrieval operation binding the contract event 0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d.
//
// Solidity: event Pay(address indexed from, address indexed to, uint256 value)
func (_UpKeeping *UpKeepingFilterer) FilterPay(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*UpKeepingPayIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "Pay", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &UpKeepingPayIterator{contract: _UpKeeping.contract, event: "Pay", logs: logs, sub: sub}, nil
}

// WatchPay is a free log subscription operation binding the contract event 0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d.
//
// Solidity: event Pay(address indexed from, address indexed to, uint256 value)
func (_UpKeeping *UpKeepingFilterer) WatchPay(opts *bind.WatchOpts, sink chan<- *UpKeepingPay, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "Pay", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingPay)
				if err := _UpKeeping.contract.UnpackLog(event, "Pay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePay is a log parse operation binding the contract event 0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d.
//
// Solidity: event Pay(address indexed from, address indexed to, uint256 value)
func (_UpKeeping *UpKeepingFilterer) ParsePay(log types.Log) (*UpKeepingPay, error) {
	event := new(UpKeepingPay)
	if err := _UpKeeping.contract.UnpackLog(event, "Pay", log); err != nil {
		return nil, err
	}
	return event, nil
}
