// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package upKeeping

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// UpKeepingKPInfo is an auto generated low-level Go binding around an user-defined struct.
type UpKeepingKPInfo struct {
	Stop     bool
	Addr     common.Address
	StEnd    *big.Int
	PayIndex *big.Int
	Money    []*big.Int
}

// UpKeepingProof is an auto generated low-level Go binding around an user-defined struct.
type UpKeepingProof struct {
	StStart    *big.Int
	StLength   *big.Int
	StValue    *big.Int
	Keeper     common.Address
	Provider   common.Address
	MerkleRoot [32]byte
}

// UpKeepingABI is the input ABI used to generate the binding from.
const UpKeepingABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_query\",\"type\":\"address\"},{\"internalType\":\"addresspayable[]\",\"name\":\"_keepers\",\"type\":\"address[]\"},{\"internalType\":\"addresspayable[]\",\"name\":\"_providers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AddOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"AddProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AlterOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ExtendTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"addresspayable[]\",\"name\":\"_providers\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sign\",\"type\":\"bytes[]\"}],\"name\":\"addProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"alterOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addTime\",\"type\":\"uint256\"}],\"name\":\"extendTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"},{\"internalType\":\"addresspayable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"money\",\"type\":\"uint256[]\"}],\"internalType\":\"structUpKeeping.KPInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"},{\"internalType\":\"addresspayable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"money\",\"type\":\"uint256[]\"}],\"internalType\":\"structUpKeeping.KPInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkle_root\",\"type\":\"bytes32\"}],\"internalType\":\"structUpKeeping.Proof[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"sign\",\"type\":\"bytes[]\"}],\"name\":\"setKeeperStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"sign\",\"type\":\"bytes[]\"}],\"name\":\"setProviderStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkle_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"share\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sign\",\"type\":\"bytes[]\"}],\"name\":\"spaceTimePay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// UpKeepingBin is the compiled bytecode used for deploying new contracts.
var UpKeepingBin = "0x608060405273acf8e37d9e3dcb47423f2938069c11d75de17a20600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073aa3f46999474c4a39a597157956db2c1883b52e3600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405162004c0638038062004c068339818101604052810190620000d3919062000706565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334b9d6346040518163ffffffff1660e01b815260040160206040518083038186803b1580156200017e57600080fd5b505afa15801562000193573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b99190620007e5565b9050600161ffff168161ffff161062000209576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002009062000853565b60405180910390fd5b87600160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600160030181905550836001600401819055508260016005018190555060004290508060016006018190555085810160016007018190555060006001600901819055508260016008018190555060005b8851811015620003e157620002b262000565565b898281518110620002bf57fe5b6020026020010151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828160400181815250506001800181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155606082015181600201556080820151816003019080519060200190620003cf929190620005ac565b5050505080806001019150506200029e565b5060005b87518110156200052957620003f962000565565b8882815181106200040657fe5b6020026020010151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816040018181525050600160020181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001015560608201518160020155608082015181600301908051906020019062000517929190620005ac565b505050508080600101915050620003e5565b507f0905316f7faca135c292b6e6f8d91c19128d372722215fe029e74e75ef84c08760405160405180910390a1505050505050505050620009b3565b6040518060a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b828054828255906000526020600020908101928215620005eb579160200282015b82811115620005ea578251825591602001919060010190620005cd565b5b509050620005fa9190620005fe565b5090565b5b8082111562000619576000816000905550600101620005ff565b5090565b6000815190506200062e816200094b565b92915050565b600081519050620006458162000965565b92915050565b600082601f8301126200065d57600080fd5b8151620006746200066e82620008a9565b62000875565b915081818352602084019350602081019050838560208402820111156200069a57600080fd5b60005b83811015620006ce5781620006b3888262000634565b8452602084019350602083019250506001810190506200069d565b5050505092915050565b600081519050620006e9816200097f565b92915050565b600081519050620007008162000999565b92915050565b600080600080600080600060e0888a0312156200072257600080fd5b6000620007328a828b016200061d565b975050602088015167ffffffffffffffff8111156200075057600080fd5b6200075e8a828b016200064b565b965050604088015167ffffffffffffffff8111156200077c57600080fd5b6200078a8a828b016200064b565b95505060606200079d8a828b01620006ef565b9450506080620007b08a828b01620006ef565b93505060a0620007c38a828b01620006ef565b92505060c0620007d68a828b01620006ef565b91505092959891949750929550565b600060208284031215620007f857600080fd5b60006200080884828501620006d8565b91505092915050565b600062000820601a83620008d8565b91507f6465706c6f792075706b656570696e672069732062616e6e65640000000000006000830152602082019050919050565b600060208201905081810360008301526200086e8162000811565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156200089f576200089e62000949565b5b8060405250919050565b600067ffffffffffffffff821115620008c757620008c662000949565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000620008f6826200091f565b9050919050565b60006200090a826200091f565b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565bfe5b6200095681620008e9565b81146200096257600080fd5b50565b6200097081620008fd565b81146200097c57600080fd5b50565b6200098a8162000911565b81146200099657600080fd5b50565b620009a4816200093f565b8114620009b057600080fd5b50565b61424380620009c36000396000f3fe60806040526004361061008a5760003560e01c8063a27aebbc11610059578063a27aebbc14610152578063d06208761461017b578063d063e733146101a4578063d187ec03146101c0578063d36dedd2146101e957610091565b80630ca05f9f146100965780632b68b9c6146100d3578063893d20e8146100ea5780638b2967881461011557610091565b3661009157005b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190613048565b61021e565b6040516100ca9190613c45565b60405180910390f35b3480156100df57600080fd5b506100e8610358565b005b3480156100f657600080fd5b506100ff610aa5565b60405161010c9190613b26565b60405180910390f35b34801561012157600080fd5b5061013c600480360381019061013791906131bc565b610ace565b6040516101499190613c45565b60405180910390f35b34801561015e57600080fd5b5061017960048036038101906101749190613251565b610f4c565b005b34801561018757600080fd5b506101a2600480360381019061019d9190613168565b61114a565b005b6101be60048036038101906101b9919061309a565b61146f565b005b3480156101cc57600080fd5b506101e760048036038101906101e29190613168565b61242f565b005b3480156101f557600080fd5b506101fe612753565b6040516102159b9a99989796959493929190613b85565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a690613cf0565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f8c153ecee6895f15da72e646b4029e0ef7cbf971986d8d9cfe48c5563d368e908184604051610346929190613b5c565b60405180910390a16001915050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dd90613cf0565b60405180910390fd5b60006103f0610aa5565b90506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23cc21c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561045c57600080fd5b505afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190613071565b90506001600801546001600701540142116104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db90613d50565b60405180910390fd5b600080600090505b60018001805490508110156107b65760009150600060018001828154811061051057fe5b90600052602060002090600402016002015490505b60018001828154811061053457fe5b9060005260206000209060040201600301805490508110156105975760018001828154811061055f57fe5b9060005260206000209060040201600301818154811061057b57fe5b9060005260206000200154830192508080600101915050610525565b506001800181815481106105a757fe5b906000526020600020906004020160000160009054906101000a900460ff161561067c578273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610611573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d8460405161066f9190613e30565b60405180910390a36107a9565b60018001818154811061068b57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610702573d6000803e3d6000fd5b5060018001818154811061071257fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d846040516107a09190613e30565b60405180910390a35b80806001019150506104ec565b5060005b600160020180549050811015610a8b57600091506000600160020182815481106107e057fe5b90600052602060002090600402016002015490505b6001600201828154811061080557fe5b906000526020600020906004020160030180549050811015610869576001600201828154811061083157fe5b9060005260206000209060040201600301818154811061084d57fe5b90600052602060002001548301925080806001019150506107f5565b506001600201818154811061087a57fe5b906000526020600020906004020160000160009054906101000a900460ff161561094f578273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156108e4573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d846040516109429190613e30565b60405180910390a3610a7e565b6001600201818154811061095f57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156109d6573d6000803e3d6000fd5b50600160020181815481106109e757fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d84604051610a759190613e30565b60405180910390a35b80806001019150506107ba565b508273ffffffffffffffffffffffffffffffffffffffff16ff5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610ad9610aa5565b90506000610ae633612b7f565b90508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b285750600180018054905081105b610b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5e90613d70565b60405180910390fd5b6001800180549050811015610d685760003086604051602001610b8b929190613afe565b604051602081830303815290604052805190602001209050600080600180018054905090508651811015610bbe57600080fd5b60005b8751811015610d1357600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319045a25858a8481518110610c1557fe5b60200260200101516040518363ffffffff1660e01b8152600401610c3a929190613c60565b60206040518083038186803b158015610c5257600080fd5b505afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a9190613071565b73ffffffffffffffffffffffffffffffffffffffff16600180018281548110610caf57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d065782806001019350505b8080600101915050610bc1565b5060038160020281610d2157fe5b04821015610d64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5b90613d90565b60405180910390fd5b5050505b60005b8551811015610f3f57600160020180549050610d99878381518110610d8c57fe5b6020026020010151612c31565b1015610da457610f32565b610dac612ce6565b868281518110610db857fe5b6020026020010151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160060154816040018181525050600160020181908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155606082015181600201556080820151816003019080519060200190610ecc929190612d2d565b5050503373ffffffffffffffffffffffffffffffffffffffff167fa35ad2ad5abe8a31481d418a51abda97be91ba2616927300d0b75a0c340e3307888481518110610f1357fe5b6020026020010151604051610f289190613b41565b60405180910390a2505b8080600101915050610d6b565b5060019250505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd190613cf0565b60405180910390fd5b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334b9d6346040518163ffffffff1660e01b815260040160206040518083038186803b15801561104457600080fd5b505afa158015611058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107c9190613228565b9050600161ffff168161ffff16106110c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c090613d30565b60405180910390fd5b600082116110d657600080fd5b60008260016007015401905060016007015481116110f357600080fd5b8260016003015401600160030181905550806001600701819055507f890f3f02e32798c719ac4ee5a0fe9b2a4f8bface63737206f954ee6c2b8379ef8360405161113d9190613e30565b60405180910390a1505050565b600160070154421115611192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118990613c90565b60405180910390fd5b600061119d33612b7f565b9050600180018054905081106111e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111df90613db0565b60405180910390fd5b60006111f384612c31565b9050600160020180549050811061123f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123690613cb0565b60405180910390fd5b60003085604051602001611254929190613a55565b60405160208183030381529060405280519060200120905060008060018001805490509050855181101561128757600080fd5b60005b86518110156113dc57600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319045a25858984815181106112de57fe5b60200260200101516040518363ffffffff1660e01b8152600401611303929190613c60565b60206040518083038186803b15801561131b57600080fd5b505afa15801561132f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113539190613071565b73ffffffffffffffffffffffffffffffffffffffff1660018001828154811061137857fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156113cf5782806001019350505b808060010191505061128a565b50600381600202816113ea57fe5b0482101561142d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142490613d90565b60405180910390fd5b600180600201858154811061143e57fe5b906000526020600020906004020160000160006101000a81548160ff02191690831515021790555050505050505050565b600061147a33612b7f565b9050600180018054905081106114c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bc90613db0565b60405180910390fd5b60006114d089612c31565b9050600160020180549050811061151c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151390613cb0565b60405180910390fd5b866001600201828154811061152d57fe5b9060005260206000209060040201600101541461157f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157690613cd0565b60405180910390fd5b60016007015486880111156115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c090613e10565b60405180910390fd5b6000308a89898c8a8a6040516020016115e89796959493929190613a81565b604051602081830303815290604052805190602001209050600084516001800180549050101561164d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164490613df0565b60405180910390fd5b60008093505b85518410156117a857600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319045a25848887815181106116a757fe5b60200260200101516040518363ffffffff1660e01b81526004016116cc929190613c60565b60206040518083038186803b1580156116e457600080fd5b505afa1580156116f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171c9190613071565b905060018001848154811061172d57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561179b5781806001019250505b8380600101945050611653565b60036001800180549050600202816117bc57fe5b048210156117ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f690613d90565b60405180910390fd5b6118088c612c31565b9350888a016001600201858154811061181d57fe5b9060005260206000209060040201600101819055508a600160090154016001600901819055506000915060006001600201858154811061185957fe5b90600052602060002090600402016002015490506001600201858154811061187d57fe5b90600052602060002090600402016003018054905095506001600801548602600160060154018b1080156118b057508581105b1561190e576009600a8d816118c157fe5b0402600160020186815481106118d357fe5b906000526020600020906004020160030160018803815481106118f257fe5b9060005260206000200160008282540192505081905550611964565b6001600201858154811061191e57fe5b90600052602060002090600402016003016009600a8e8161193b57fe5b040290806001815401808255809150506001900390600052602060002001600090919091909150555b6001600201858154811061197457fe5b90600052602060002090600402016003018054905095506001600201858154811061199b57fe5b906000526020600020906004020160000160009054906101000a900460ff16611cce57600160080154600382010260016006015401421115611b6857600160020185815481106119e757fe5b90600052602060002090600402016003018181548110611a0357fe5b90600052602060002001546001600901540360016009018190555060016002018581548110611a2e57fe5b9060005260206000209060040201600201600081548092919060010191905055508c73ffffffffffffffffffffffffffffffffffffffff166108fc60016002018781548110611a7957fe5b90600052602060002090600402016003018381548110611a9557fe5b90600052602060002001549081150290604051600060405180830381858888f19350505050158015611acb573d6000803e3d6000fd5b508c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d60016002018881548110611b2b57fe5b90600052602060002090600402016003018481548110611b4757fe5b9060005260206000200154604051611b5f9190613e30565b60405180910390a35b6001600701544210611ccd5760016002018581548110611b8457fe5b90600052602060002090600402016002015490505b85811015611be95760016002018581548110611bb157fe5b90600052602060002090600402016003018181548110611bcd57fe5b9060005260206000200154830192508080600101915050611b99565b82600160090154036001600901819055508560016002018681548110611c0b57fe5b9060005260206000209060040201600201819055508c73ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611c66573d6000803e3d6000fd5b508c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d85604051611cc49190613e30565b60405180910390a35b5b600094505b60018001805490508510156122d557600180018581548110611cf157fe5b9060005260206000209060040201600201549050600180018581548110611d1457fe5b90600052602060002090600402016003018054905095506001600801548602600160060154018b108015611d4757508581105b15611dd95787600180018054905081518110611d5f57fe5b6020026020010151888681518110611d7357fe5b6020026020010151600a8e81611d8557fe5b040281611d8e57fe5b04600180018681548110611d9e57fe5b90600052602060002090600402016003016001880381548110611dbd57fe5b9060005260206000200160008282540192505081905550611e63565b600180018581548110611de857fe5b906000526020600020906004020160030188600180018054905081518110611e0c57fe5b6020026020010151898781518110611e2057fe5b6020026020010151600a8f81611e3257fe5b040281611e3b57fe5b0490806001815401808255809150506001900390600052602060002001600090919091909150555b600180018581548110611e7257fe5b9060005260206000209060040201600301805490509550600180018581548110611e9857fe5b906000526020600020906004020160000160009054906101000a900460ff166122c8576001600801546003820102600160060154014211156120e157600180018581548110611ee357fe5b90600052602060002090600402016003018181548110611eff57fe5b906000526020600020015460016009015403600160090181905550600180018581548110611f2957fe5b906000526020600020906004020160020160008154809291906001019190505550600180018581548110611f5957fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600180018781548110611fb357fe5b90600052602060002090600402016003018381548110611fcf57fe5b90600052602060002001549081150290604051600060405180830381858888f19350505050158015612005573d6000803e3d6000fd5b5060018001858154811061201557fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d6001800188815481106120a457fe5b906000526020600020906004020160030184815481106120c057fe5b90600052602060002001546040516120d89190613e30565b60405180910390a35b60016007015442106122c7576000925060018001858154811061210057fe5b90600052602060002090600402016002015490505b858110156121645760018001858154811061212c57fe5b9060005260206000209060040201600301818154811061214857fe5b9060005260206000200154830192508080600101915050612115565b82600160090154036001600901819055508560018001868154811061218557fe5b9060005260206000209060040201600201819055506001800185815481106121a957fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015612220573d6000803e3d6000fd5b5060018001858154811061223057fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d856040516122be9190613e30565b60405180910390a35b5b8480600101955050611cd3565b6122dd612d7a565b6040518060c001604052808d81526020018c81526020018e81526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018f73ffffffffffffffffffffffffffffffffffffffff1681526020018b81525090506001600a0181908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015550505050505050505050505050505050565b600160070154421115612477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246e90613d10565b60405180910390fd5b600061248233612b7f565b9050600180018054905081106124cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c490613db0565b60405180910390fd5b60006124d884612b7f565b905060018001805490508110612523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251a90613dd0565b60405180910390fd5b60003085604051602001612538929190613a55565b60405160208183030381529060405280519060200120905060008060018001805490509050855181101561256b57600080fd5b60005b86518110156126c057600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319045a25858984815181106125c257fe5b60200260200101516040518363ffffffff1660e01b81526004016125e7929190613c60565b60206040518083038186803b1580156125ff57600080fd5b505afa158015612613573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126379190613071565b73ffffffffffffffffffffffffffffffffffffffff1660018001828154811061265c57fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156126b35782806001019350505b808060010191505061256e565b50600381600202816126ce57fe5b04821015612711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270890613d90565b60405180910390fd5b600180600101858154811061272257fe5b906000526020600020906004020160000160006101000a81548160ff02191690831515021790555050505050505050565b600060608060008060008060008060006060600160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001800160016002016001600301546001600401546001600501546001600601546001600701546001600801546001600901546001600a0189805480602002602001604051908101604052809291908181526020016000905b828210156128f357838290600052602060002090600402016040518060a00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156128db57602002820191906000526020600020905b8154815260200190600101908083116128c7575b505050505081525050815260200190600101906127e4565b50505050995088805480602002602001604051908101604052809291908181526020016000905b82821015612a2957838290600052602060002090600402016040518060a00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015612a1157602002820191906000526020600020905b8154815260200190600101908083116129fd575b5050505050815250508152602001906001019061291a565b50505050985080805480602002602001604051908101604052809291908181526020016000905b82821015612b5657838290600052602060002090600602016040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152505081526020019060010190612a50565b5050505090509a509a509a509a509a509a509a509a509a509a509a50909192939495969798999a565b600080600090505b6001800180549050811015612c2057600180018181548110612ba557fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612c135780915050612c2c565b8080600101915050612b87565b50600180018054905090505b919050565b600080600090505b600160020180549050811015612cd45760016002018181548110612c5957fe5b906000526020600020906004020160000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612cc75780915050612ce1565b8080600101915050612c39565b5060016002018054905090505b919050565b6040518060a00160405280600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b828054828255906000526020600020908101928215612d69579160200282015b82811115612d68578251825591602001919060010190612d4d565b5b509050612d769190612ddf565b5090565b6040518060c00160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681525090565b5b80821115612df8576000816000905550600101612de0565b5090565b600081359050612e0b8161419a565b92915050565b600081519050612e208161419a565b92915050565b600081359050612e35816141b1565b92915050565b600082601f830112612e4c57600080fd5b8135612e5f612e5a82613e7c565b613e4b565b91508181835260208401935060208101905083856020840282011115612e8457600080fd5b60005b83811015612eb45781612e9a8882612e26565b845260208401935060208301925050600181019050612e87565b5050505092915050565b600082601f830112612ecf57600080fd5b8135612ee2612edd82613ea8565b613e4b565b9150818183526020840193506020810190508360005b83811015612f285781358601612f0e8882612fca565b845260208401935060208301925050600181019050612ef8565b5050505092915050565b600082601f830112612f4357600080fd5b8135612f56612f5182613ed4565b613e4b565b91508181835260208401935060208101905083856020840282011115612f7b57600080fd5b60005b83811015612fab5781612f918882613033565b845260208401935060208301925050600181019050612f7e565b5050505092915050565b600081359050612fc4816141c8565b92915050565b600082601f830112612fdb57600080fd5b8135612fee612fe982613f00565b613e4b565b9150808252602083016020830185838301111561300a57600080fd5b6130158382846140ee565b50505092915050565b60008151905061302d816141df565b92915050565b600081359050613042816141f6565b92915050565b60006020828403121561305a57600080fd5b600061306884828501612dfc565b91505092915050565b60006020828403121561308357600080fd5b600061309184828501612e11565b91505092915050565b600080600080600080600060e0888a0312156130b557600080fd5b60006130c38a828b01612e26565b97505060206130d48a828b01613033565b96505060406130e58a828b01613033565b95505060606130f68a828b01613033565b94505060806131078a828b01612fb5565b93505060a088013567ffffffffffffffff81111561312457600080fd5b6131308a828b01612f32565b92505060c088013567ffffffffffffffff81111561314d57600080fd5b6131598a828b01612ebe565b91505092959891949750929550565b6000806040838503121561317b57600080fd5b600061318985828601612dfc565b925050602083013567ffffffffffffffff8111156131a657600080fd5b6131b285828601612ebe565b9150509250929050565b600080604083850312156131cf57600080fd5b600083013567ffffffffffffffff8111156131e957600080fd5b6131f585828601612e3b565b925050602083013567ffffffffffffffff81111561321257600080fd5b61321e85828601612ebe565b9150509250929050565b60006020828403121561323a57600080fd5b60006132488482850161301e565b91505092915050565b60006020828403121561326357600080fd5b600061327184828501613033565b91505092915050565b6000613286838361330c565b60208301905092915050565b600061329e8383613920565b905092915050565b60006132b28383613996565b60c08301905092915050565b60006132ca8383613a11565b60208301905092915050565b60006132e28383613a2f565b60208301905092915050565b6132f7816140b8565b82525050565b61330681614058565b82525050565b61331581614058565b82525050565b61332c61332782614058565b614142565b82525050565b61333b81614046565b82525050565b61334a81614046565b82525050565b61336161335c82614046565b614130565b82525050565b600061337282613f70565b61337c8185613fdb565b935061338783613f30565b8060005b838110156133b857815161339f888261327a565b97506133aa83613fa7565b92505060018101905061338b565b5085935050505092915050565b60006133d082613f7b565b6133da8185613fe6565b9350836020820285016133ec85613f40565b8060005b8581101561342857848403895281516134098582613292565b945061341483613fb4565b925060208a019950506001810190506133f0565b50829750879550505050505092915050565b600061344582613f86565b61344f8185613ff7565b935061345a83613f50565b8060005b8381101561348b57815161347288826132a6565b975061347d83613fc1565b92505060018101905061345e565b5085935050505092915050565b60006134a382613f91565b6134ad8185614008565b93506134b883613f60565b8060005b838110156134e95781516134d088826132be565b97506134db83613fce565b9250506001810190506134bc565b5085935050505092915050565b600061350182613f91565b61350b8185614019565b935061351683613f60565b8060005b8381101561354757815161352e88826132d6565b975061353983613fce565b92505060018101905061351a565b5085935050505092915050565b61355d8161406a565b82525050565b61356c8161406a565b82525050565b61357b81614076565b82525050565b61358a81614076565b82525050565b6135a161359c82614076565b614154565b82525050565b60006135b282613f9c565b6135bc8185614024565b93506135cc8185602086016140fd565b6135d58161417c565b840191505092915050565b60006135ed600e83614035565b91507f54696d65206973206578636565640000000000000000000000000000000000006000830152602082019050919050565b600061362d601083614035565b91507f696c6c6567616c2070726f7669646572000000000000000000000000000000006000830152602082019050919050565b600061366d600f83614035565b91507f696c6c6567616c207374537461727400000000000000000000000000000000006000830152602082019050919050565b60006136ad601383614035565b91507f6f6e6c79206f776e65722063616e2063616c6c000000000000000000000000006000830152602082019050919050565b60006136ed600e83614035565b91507f74696d65206973206578636565640000000000000000000000000000000000006000830152602082019050919050565b600061372d601483614035565b91507f657874656e6454696d652069732062616e6e65640000000000000000000000006000830152602082019050919050565b600061376d600e83614035565b91507f54696d65206973206e6f742075700000000000000000000000000000000000006000830152602082019050919050565b60006137ad600e83614035565b91507f696c6c6567616c2063616c6c65720000000000000000000000000000000000006000830152602082019050919050565b60006137ed601c83614035565b91507f696e73756666696369656e74206c6567616c207369676e6174757265000000006000830152602082019050919050565b600061382d601483614035565b91507f6f6e6c79206b65657065722063616e2063616c6c0000000000000000000000006000830152602082019050919050565b600061386d600e83614035565b91507f696c6c6567616c206b65657065720000000000000000000000000000000000006000830152602082019050919050565b60006138ad600d83614035565b91507f746f6f206d756368207369676e000000000000000000000000000000000000006000830152602082019050919050565b60006138ed601483614035565b91507f73744c656e677468206578636565642074696d650000000000000000000000006000830152602082019050919050565b600060a0830160008301516139386000860182613554565b50602083015161394b60208601826132fd565b50604083015161395e6040860182613a11565b5060608301516139716060860182613a11565b50608083015184820360808601526139898282613498565b9150508091505092915050565b60c0820160008201516139ac6000850182613a11565b5060208201516139bf6020850182613a11565b5060408201516139d26040850182613a11565b5060608201516139e56060850182613332565b5060808201516139f86080850182613332565b5060a0820151613a0b60a0850182613572565b50505050565b613a1a816140ae565b82525050565b613a29816140ae565b82525050565b613a38816140ae565b82525050565b613a4f613a4a826140ae565b614170565b82525050565b6000613a61828561331b565b601482019150613a718284613350565b6014820191508190509392505050565b6000613a8d828a61331b565b601482019150613a9d828961331b565b601482019150613aad8288613a3e565b602082019150613abd8287613a3e565b602082019150613acd8286613a3e565b602082019150613add8285613590565b602082019150613aed82846134f6565b915081905098975050505050505050565b6000613b0a828561331b565b601482019150613b1a8284613367565b91508190509392505050565b6000602082019050613b3b6000830184613341565b92915050565b6000602082019050613b5660008301846132ee565b92915050565b6000604082019050613b716000830185613341565b613b7e6020830184613341565b9392505050565b600061016082019050613b9b600083018e613341565b8181036020830152613bad818d6133c5565b90508181036040830152613bc1818c6133c5565b9050613bd0606083018b613a20565b613bdd608083018a613a20565b613bea60a0830189613a20565b613bf760c0830188613a20565b613c0460e0830187613a20565b613c12610100830186613a20565b613c20610120830185613a20565b818103610140830152613c33818461343a565b90509c9b505050505050505050505050565b6000602082019050613c5a6000830184613563565b92915050565b6000604082019050613c756000830185613581565b8181036020830152613c8781846135a7565b90509392505050565b60006020820190508181036000830152613ca9816135e0565b9050919050565b60006020820190508181036000830152613cc981613620565b9050919050565b60006020820190508181036000830152613ce981613660565b9050919050565b60006020820190508181036000830152613d09816136a0565b9050919050565b60006020820190508181036000830152613d29816136e0565b9050919050565b60006020820190508181036000830152613d4981613720565b9050919050565b60006020820190508181036000830152613d6981613760565b9050919050565b60006020820190508181036000830152613d89816137a0565b9050919050565b60006020820190508181036000830152613da9816137e0565b9050919050565b60006020820190508181036000830152613dc981613820565b9050919050565b60006020820190508181036000830152613de981613860565b9050919050565b60006020820190508181036000830152613e09816138a0565b9050919050565b60006020820190508181036000830152613e29816138e0565b9050919050565b6000602082019050613e456000830184613a20565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613e7257613e7161417a565b5b8060405250919050565b600067ffffffffffffffff821115613e9757613e9661417a565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613ec357613ec261417a565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613eef57613eee61417a565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613f1b57613f1a61417a565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006140518261408e565b9050919050565b60006140638261408e565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006140c3826140ca565b9050919050565b60006140d5826140dc565b9050919050565b60006140e78261408e565b9050919050565b82818337600083830152505050565b60005b8381101561411b578082015181840152602081019050614100565b8381111561412a576000848401525b50505050565b600061413b8261415e565b9050919050565b600061414d8261415e565b9050919050565b6000819050919050565b60006141698261418d565b9050919050565b6000819050919050565bfe5b6000601f19601f8301169050919050565b60008160601b9050919050565b6141a381614046565b81146141ae57600080fd5b50565b6141ba81614058565b81146141c557600080fd5b50565b6141d181614076565b81146141dc57600080fd5b50565b6141e881614080565b81146141f357600080fd5b50565b6141ff816140ae565b811461420a57600080fd5b5056fea26469706673582212209c5d407b51b4a4205dc9750777d298e3900fd090b378a5b1ed42eca37c3d4a1a64736f6c63430007030033"

// DeployUpKeeping deploys a new Ethereum contract, binding an instance of UpKeeping to it.
func DeployUpKeeping(auth *bind.TransactOpts, backend bind.ContractBackend, _query common.Address, _keepers []common.Address, _providers []common.Address, _time *big.Int, _size *big.Int, _price *big.Int, _cycle *big.Int) (common.Address, *types.Transaction, *UpKeeping, error) {
	parsed, err := abi.JSON(strings.NewReader(UpKeepingABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(UpKeepingBin), backend, _query, _keepers, _providers, _time, _size, _price, _cycle)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UpKeeping{UpKeepingCaller: UpKeepingCaller{contract: contract}, UpKeepingTransactor: UpKeepingTransactor{contract: contract}, UpKeepingFilterer: UpKeepingFilterer{contract: contract}}, nil
}

// UpKeeping is an auto generated Go binding around an Ethereum contract.
type UpKeeping struct {
	UpKeepingCaller     // Read-only binding to the contract
	UpKeepingTransactor // Write-only binding to the contract
	UpKeepingFilterer   // Log filterer for contract events
}

// UpKeepingCaller is an auto generated read-only Go binding around an Ethereum contract.
type UpKeepingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpKeepingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UpKeepingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpKeepingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UpKeepingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpKeepingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UpKeepingSession struct {
	Contract     *UpKeeping        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UpKeepingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UpKeepingCallerSession struct {
	Contract *UpKeepingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// UpKeepingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UpKeepingTransactorSession struct {
	Contract     *UpKeepingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// UpKeepingRaw is an auto generated low-level Go binding around an Ethereum contract.
type UpKeepingRaw struct {
	Contract *UpKeeping // Generic contract binding to access the raw methods on
}

// UpKeepingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UpKeepingCallerRaw struct {
	Contract *UpKeepingCaller // Generic read-only contract binding to access the raw methods on
}

// UpKeepingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UpKeepingTransactorRaw struct {
	Contract *UpKeepingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUpKeeping creates a new instance of UpKeeping, bound to a specific deployed contract.
func NewUpKeeping(address common.Address, backend bind.ContractBackend) (*UpKeeping, error) {
	contract, err := bindUpKeeping(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UpKeeping{UpKeepingCaller: UpKeepingCaller{contract: contract}, UpKeepingTransactor: UpKeepingTransactor{contract: contract}, UpKeepingFilterer: UpKeepingFilterer{contract: contract}}, nil
}

// NewUpKeepingCaller creates a new read-only instance of UpKeeping, bound to a specific deployed contract.
func NewUpKeepingCaller(address common.Address, caller bind.ContractCaller) (*UpKeepingCaller, error) {
	contract, err := bindUpKeeping(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UpKeepingCaller{contract: contract}, nil
}

// NewUpKeepingTransactor creates a new write-only instance of UpKeeping, bound to a specific deployed contract.
func NewUpKeepingTransactor(address common.Address, transactor bind.ContractTransactor) (*UpKeepingTransactor, error) {
	contract, err := bindUpKeeping(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UpKeepingTransactor{contract: contract}, nil
}

// NewUpKeepingFilterer creates a new log filterer instance of UpKeeping, bound to a specific deployed contract.
func NewUpKeepingFilterer(address common.Address, filterer bind.ContractFilterer) (*UpKeepingFilterer, error) {
	contract, err := bindUpKeeping(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UpKeepingFilterer{contract: contract}, nil
}

// bindUpKeeping binds a generic wrapper to an already deployed contract.
func bindUpKeeping(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UpKeepingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpKeeping *UpKeepingRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UpKeeping.Contract.UpKeepingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpKeeping *UpKeepingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpKeeping.Contract.UpKeepingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpKeeping *UpKeepingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpKeeping.Contract.UpKeepingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpKeeping *UpKeepingCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UpKeeping.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpKeeping *UpKeepingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpKeeping.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpKeeping *UpKeepingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpKeeping.Contract.contract.Transact(opts, method, params...)
}

// GetOrder is a free data retrieval call binding the contract method 0xd36dedd2.
//
// Solidity: function getOrder() view returns(address, (bool,address,uint256,uint256,uint256[])[], (bool,address,uint256,uint256,uint256[])[], uint256, uint256, uint256, uint256, uint256, uint256, uint256, (uint256,uint256,uint256,address,address,bytes32)[])
func (_UpKeeping *UpKeepingCaller) GetOrder(opts *bind.CallOpts) (common.Address, []UpKeepingKPInfo, []UpKeepingKPInfo, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, []UpKeepingProof, error) {
	var (
		ret0  = new(common.Address)
		ret1  = new([]UpKeepingKPInfo)
		ret2  = new([]UpKeepingKPInfo)
		ret3  = new(*big.Int)
		ret4  = new(*big.Int)
		ret5  = new(*big.Int)
		ret6  = new(*big.Int)
		ret7  = new(*big.Int)
		ret8  = new(*big.Int)
		ret9  = new(*big.Int)
		ret10 = new([]UpKeepingProof)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
		ret5,
		ret6,
		ret7,
		ret8,
		ret9,
		ret10,
	}
	err := _UpKeeping.contract.Call(opts, out, "getOrder")
	return *ret0, *ret1, *ret2, *ret3, *ret4, *ret5, *ret6, *ret7, *ret8, *ret9, *ret10, err
}

// GetOrder is a free data retrieval call binding the contract method 0xd36dedd2.
//
// Solidity: function getOrder() view returns(address, (bool,address,uint256,uint256,uint256[])[], (bool,address,uint256,uint256,uint256[])[], uint256, uint256, uint256, uint256, uint256, uint256, uint256, (uint256,uint256,uint256,address,address,bytes32)[])
func (_UpKeeping *UpKeepingSession) GetOrder() (common.Address, []UpKeepingKPInfo, []UpKeepingKPInfo, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, []UpKeepingProof, error) {
	return _UpKeeping.Contract.GetOrder(&_UpKeeping.CallOpts)
}

// GetOrder is a free data retrieval call binding the contract method 0xd36dedd2.
//
// Solidity: function getOrder() view returns(address, (bool,address,uint256,uint256,uint256[])[], (bool,address,uint256,uint256,uint256[])[], uint256, uint256, uint256, uint256, uint256, uint256, uint256, (uint256,uint256,uint256,address,address,bytes32)[])
func (_UpKeeping *UpKeepingCallerSession) GetOrder() (common.Address, []UpKeepingKPInfo, []UpKeepingKPInfo, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, []UpKeepingProof, error) {
	return _UpKeeping.Contract.GetOrder(&_UpKeeping.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_UpKeeping *UpKeepingCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _UpKeeping.contract.Call(opts, out, "getOwner")
	return *ret0, err
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_UpKeeping *UpKeepingSession) GetOwner() (common.Address, error) {
	return _UpKeeping.Contract.GetOwner(&_UpKeeping.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_UpKeeping *UpKeepingCallerSession) GetOwner() (common.Address, error) {
	return _UpKeeping.Contract.GetOwner(&_UpKeeping.CallOpts)
}

// AddProvider is a paid mutator transaction binding the contract method 0x8b296788.
//
// Solidity: function addProvider(address[] _providers, bytes[] sign) returns(bool)
func (_UpKeeping *UpKeepingTransactor) AddProvider(opts *bind.TransactOpts, _providers []common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "addProvider", _providers, sign)
}

// AddProvider is a paid mutator transaction binding the contract method 0x8b296788.
//
// Solidity: function addProvider(address[] _providers, bytes[] sign) returns(bool)
func (_UpKeeping *UpKeepingSession) AddProvider(_providers []common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.AddProvider(&_UpKeeping.TransactOpts, _providers, sign)
}

// AddProvider is a paid mutator transaction binding the contract method 0x8b296788.
//
// Solidity: function addProvider(address[] _providers, bytes[] sign) returns(bool)
func (_UpKeeping *UpKeepingTransactorSession) AddProvider(_providers []common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.AddProvider(&_UpKeeping.TransactOpts, _providers, sign)
}

// AlterOwner is a paid mutator transaction binding the contract method 0x0ca05f9f.
//
// Solidity: function alterOwner(address newOwner) returns(bool)
func (_UpKeeping *UpKeepingTransactor) AlterOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "alterOwner", newOwner)
}

// AlterOwner is a paid mutator transaction binding the contract method 0x0ca05f9f.
//
// Solidity: function alterOwner(address newOwner) returns(bool)
func (_UpKeeping *UpKeepingSession) AlterOwner(newOwner common.Address) (*types.Transaction, error) {
	return _UpKeeping.Contract.AlterOwner(&_UpKeeping.TransactOpts, newOwner)
}

// AlterOwner is a paid mutator transaction binding the contract method 0x0ca05f9f.
//
// Solidity: function alterOwner(address newOwner) returns(bool)
func (_UpKeeping *UpKeepingTransactorSession) AlterOwner(newOwner common.Address) (*types.Transaction, error) {
	return _UpKeeping.Contract.AlterOwner(&_UpKeeping.TransactOpts, newOwner)
}

// Destruct is a paid mutator transaction binding the contract method 0x2b68b9c6.
//
// Solidity: function destruct() returns()
func (_UpKeeping *UpKeepingTransactor) Destruct(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "destruct")
}

// Destruct is a paid mutator transaction binding the contract method 0x2b68b9c6.
//
// Solidity: function destruct() returns()
func (_UpKeeping *UpKeepingSession) Destruct() (*types.Transaction, error) {
	return _UpKeeping.Contract.Destruct(&_UpKeeping.TransactOpts)
}

// Destruct is a paid mutator transaction binding the contract method 0x2b68b9c6.
//
// Solidity: function destruct() returns()
func (_UpKeeping *UpKeepingTransactorSession) Destruct() (*types.Transaction, error) {
	return _UpKeeping.Contract.Destruct(&_UpKeeping.TransactOpts)
}

// ExtendTime is a paid mutator transaction binding the contract method 0xa27aebbc.
//
// Solidity: function extendTime(uint256 addTime) returns()
func (_UpKeeping *UpKeepingTransactor) ExtendTime(opts *bind.TransactOpts, addTime *big.Int) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "extendTime", addTime)
}

// ExtendTime is a paid mutator transaction binding the contract method 0xa27aebbc.
//
// Solidity: function extendTime(uint256 addTime) returns()
func (_UpKeeping *UpKeepingSession) ExtendTime(addTime *big.Int) (*types.Transaction, error) {
	return _UpKeeping.Contract.ExtendTime(&_UpKeeping.TransactOpts, addTime)
}

// ExtendTime is a paid mutator transaction binding the contract method 0xa27aebbc.
//
// Solidity: function extendTime(uint256 addTime) returns()
func (_UpKeeping *UpKeepingTransactorSession) ExtendTime(addTime *big.Int) (*types.Transaction, error) {
	return _UpKeeping.Contract.ExtendTime(&_UpKeeping.TransactOpts, addTime)
}

// SetKeeperStop is a paid mutator transaction binding the contract method 0xd187ec03.
//
// Solidity: function setKeeperStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingTransactor) SetKeeperStop(opts *bind.TransactOpts, _addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "setKeeperStop", _addr, sign)
}

// SetKeeperStop is a paid mutator transaction binding the contract method 0xd187ec03.
//
// Solidity: function setKeeperStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingSession) SetKeeperStop(_addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SetKeeperStop(&_UpKeeping.TransactOpts, _addr, sign)
}

// SetKeeperStop is a paid mutator transaction binding the contract method 0xd187ec03.
//
// Solidity: function setKeeperStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingTransactorSession) SetKeeperStop(_addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SetKeeperStop(&_UpKeeping.TransactOpts, _addr, sign)
}

// SetProviderStop is a paid mutator transaction binding the contract method 0xd0620876.
//
// Solidity: function setProviderStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingTransactor) SetProviderStop(opts *bind.TransactOpts, _addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "setProviderStop", _addr, sign)
}

// SetProviderStop is a paid mutator transaction binding the contract method 0xd0620876.
//
// Solidity: function setProviderStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingSession) SetProviderStop(_addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SetProviderStop(&_UpKeeping.TransactOpts, _addr, sign)
}

// SetProviderStop is a paid mutator transaction binding the contract method 0xd0620876.
//
// Solidity: function setProviderStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingTransactorSession) SetProviderStop(_addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SetProviderStop(&_UpKeeping.TransactOpts, _addr, sign)
}

// SpaceTimePay is a paid mutator transaction binding the contract method 0xd063e733.
//
// Solidity: function spaceTimePay(address _provider, uint256 _stValue, uint256 _stStart, uint256 _stLength, bytes32 _merkle_root, uint256[] share, bytes[] sign) payable returns()
func (_UpKeeping *UpKeepingTransactor) SpaceTimePay(opts *bind.TransactOpts, _provider common.Address, _stValue *big.Int, _stStart *big.Int, _stLength *big.Int, _merkle_root [32]byte, share []*big.Int, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "spaceTimePay", _provider, _stValue, _stStart, _stLength, _merkle_root, share, sign)
}

// SpaceTimePay is a paid mutator transaction binding the contract method 0xd063e733.
//
// Solidity: function spaceTimePay(address _provider, uint256 _stValue, uint256 _stStart, uint256 _stLength, bytes32 _merkle_root, uint256[] share, bytes[] sign) payable returns()
func (_UpKeeping *UpKeepingSession) SpaceTimePay(_provider common.Address, _stValue *big.Int, _stStart *big.Int, _stLength *big.Int, _merkle_root [32]byte, share []*big.Int, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SpaceTimePay(&_UpKeeping.TransactOpts, _provider, _stValue, _stStart, _stLength, _merkle_root, share, sign)
}

// SpaceTimePay is a paid mutator transaction binding the contract method 0xd063e733.
//
// Solidity: function spaceTimePay(address _provider, uint256 _stValue, uint256 _stStart, uint256 _stLength, bytes32 _merkle_root, uint256[] share, bytes[] sign) payable returns()
func (_UpKeeping *UpKeepingTransactorSession) SpaceTimePay(_provider common.Address, _stValue *big.Int, _stStart *big.Int, _stLength *big.Int, _merkle_root [32]byte, share []*big.Int, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SpaceTimePay(&_UpKeeping.TransactOpts, _provider, _stValue, _stStart, _stLength, _merkle_root, share, sign)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UpKeeping *UpKeepingTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpKeeping.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UpKeeping *UpKeepingSession) Receive() (*types.Transaction, error) {
	return _UpKeeping.Contract.Receive(&_UpKeeping.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UpKeeping *UpKeepingTransactorSession) Receive() (*types.Transaction, error) {
	return _UpKeeping.Contract.Receive(&_UpKeeping.TransactOpts)
}

// UpKeepingAddOrderIterator is returned from FilterAddOrder and is used to iterate over the raw logs and unpacked data for AddOrder events raised by the UpKeeping contract.
type UpKeepingAddOrderIterator struct {
	Event *UpKeepingAddOrder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingAddOrderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingAddOrder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingAddOrder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingAddOrderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingAddOrderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingAddOrder represents a AddOrder event raised by the UpKeeping contract.
type UpKeepingAddOrder struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAddOrder is a free log retrieval operation binding the contract event 0x0905316f7faca135c292b6e6f8d91c19128d372722215fe029e74e75ef84c087.
//
// Solidity: event AddOrder()
func (_UpKeeping *UpKeepingFilterer) FilterAddOrder(opts *bind.FilterOpts) (*UpKeepingAddOrderIterator, error) {

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "AddOrder")
	if err != nil {
		return nil, err
	}
	return &UpKeepingAddOrderIterator{contract: _UpKeeping.contract, event: "AddOrder", logs: logs, sub: sub}, nil
}

// WatchAddOrder is a free log subscription operation binding the contract event 0x0905316f7faca135c292b6e6f8d91c19128d372722215fe029e74e75ef84c087.
//
// Solidity: event AddOrder()
func (_UpKeeping *UpKeepingFilterer) WatchAddOrder(opts *bind.WatchOpts, sink chan<- *UpKeepingAddOrder) (event.Subscription, error) {

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "AddOrder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingAddOrder)
				if err := _UpKeeping.contract.UnpackLog(event, "AddOrder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddOrder is a log parse operation binding the contract event 0x0905316f7faca135c292b6e6f8d91c19128d372722215fe029e74e75ef84c087.
//
// Solidity: event AddOrder()
func (_UpKeeping *UpKeepingFilterer) ParseAddOrder(log types.Log) (*UpKeepingAddOrder, error) {
	event := new(UpKeepingAddOrder)
	if err := _UpKeeping.contract.UnpackLog(event, "AddOrder", log); err != nil {
		return nil, err
	}
	return event, nil
}

// UpKeepingAddProviderIterator is returned from FilterAddProvider and is used to iterate over the raw logs and unpacked data for AddProvider events raised by the UpKeeping contract.
type UpKeepingAddProviderIterator struct {
	Event *UpKeepingAddProvider // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingAddProviderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingAddProvider)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingAddProvider)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingAddProviderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingAddProviderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingAddProvider represents a AddProvider event raised by the UpKeeping contract.
type UpKeepingAddProvider struct {
	From     common.Address
	Provider common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAddProvider is a free log retrieval operation binding the contract event 0xa35ad2ad5abe8a31481d418a51abda97be91ba2616927300d0b75a0c340e3307.
//
// Solidity: event AddProvider(address indexed from, address provider)
func (_UpKeeping *UpKeepingFilterer) FilterAddProvider(opts *bind.FilterOpts, from []common.Address) (*UpKeepingAddProviderIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "AddProvider", fromRule)
	if err != nil {
		return nil, err
	}
	return &UpKeepingAddProviderIterator{contract: _UpKeeping.contract, event: "AddProvider", logs: logs, sub: sub}, nil
}

// WatchAddProvider is a free log subscription operation binding the contract event 0xa35ad2ad5abe8a31481d418a51abda97be91ba2616927300d0b75a0c340e3307.
//
// Solidity: event AddProvider(address indexed from, address provider)
func (_UpKeeping *UpKeepingFilterer) WatchAddProvider(opts *bind.WatchOpts, sink chan<- *UpKeepingAddProvider, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "AddProvider", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingAddProvider)
				if err := _UpKeeping.contract.UnpackLog(event, "AddProvider", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddProvider is a log parse operation binding the contract event 0xa35ad2ad5abe8a31481d418a51abda97be91ba2616927300d0b75a0c340e3307.
//
// Solidity: event AddProvider(address indexed from, address provider)
func (_UpKeeping *UpKeepingFilterer) ParseAddProvider(log types.Log) (*UpKeepingAddProvider, error) {
	event := new(UpKeepingAddProvider)
	if err := _UpKeeping.contract.UnpackLog(event, "AddProvider", log); err != nil {
		return nil, err
	}
	return event, nil
}

// UpKeepingAlterOwnerIterator is returned from FilterAlterOwner and is used to iterate over the raw logs and unpacked data for AlterOwner events raised by the UpKeeping contract.
type UpKeepingAlterOwnerIterator struct {
	Event *UpKeepingAlterOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingAlterOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingAlterOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingAlterOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingAlterOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingAlterOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingAlterOwner represents a AlterOwner event raised by the UpKeeping contract.
type UpKeepingAlterOwner struct {
	From common.Address
	To   common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAlterOwner is a free log retrieval operation binding the contract event 0x8c153ecee6895f15da72e646b4029e0ef7cbf971986d8d9cfe48c5563d368e90.
//
// Solidity: event AlterOwner(address from, address to)
func (_UpKeeping *UpKeepingFilterer) FilterAlterOwner(opts *bind.FilterOpts) (*UpKeepingAlterOwnerIterator, error) {

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "AlterOwner")
	if err != nil {
		return nil, err
	}
	return &UpKeepingAlterOwnerIterator{contract: _UpKeeping.contract, event: "AlterOwner", logs: logs, sub: sub}, nil
}

// WatchAlterOwner is a free log subscription operation binding the contract event 0x8c153ecee6895f15da72e646b4029e0ef7cbf971986d8d9cfe48c5563d368e90.
//
// Solidity: event AlterOwner(address from, address to)
func (_UpKeeping *UpKeepingFilterer) WatchAlterOwner(opts *bind.WatchOpts, sink chan<- *UpKeepingAlterOwner) (event.Subscription, error) {

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "AlterOwner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingAlterOwner)
				if err := _UpKeeping.contract.UnpackLog(event, "AlterOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlterOwner is a log parse operation binding the contract event 0x8c153ecee6895f15da72e646b4029e0ef7cbf971986d8d9cfe48c5563d368e90.
//
// Solidity: event AlterOwner(address from, address to)
func (_UpKeeping *UpKeepingFilterer) ParseAlterOwner(log types.Log) (*UpKeepingAlterOwner, error) {
	event := new(UpKeepingAlterOwner)
	if err := _UpKeeping.contract.UnpackLog(event, "AlterOwner", log); err != nil {
		return nil, err
	}
	return event, nil
}

// UpKeepingExtendTimeIterator is returned from FilterExtendTime and is used to iterate over the raw logs and unpacked data for ExtendTime events raised by the UpKeeping contract.
type UpKeepingExtendTimeIterator struct {
	Event *UpKeepingExtendTime // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingExtendTimeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingExtendTime)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingExtendTime)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingExtendTimeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingExtendTimeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingExtendTime represents a ExtendTime event raised by the UpKeeping contract.
type UpKeepingExtendTime struct {
	Time *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterExtendTime is a free log retrieval operation binding the contract event 0x890f3f02e32798c719ac4ee5a0fe9b2a4f8bface63737206f954ee6c2b8379ef.
//
// Solidity: event ExtendTime(uint256 time)
func (_UpKeeping *UpKeepingFilterer) FilterExtendTime(opts *bind.FilterOpts) (*UpKeepingExtendTimeIterator, error) {

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "ExtendTime")
	if err != nil {
		return nil, err
	}
	return &UpKeepingExtendTimeIterator{contract: _UpKeeping.contract, event: "ExtendTime", logs: logs, sub: sub}, nil
}

// WatchExtendTime is a free log subscription operation binding the contract event 0x890f3f02e32798c719ac4ee5a0fe9b2a4f8bface63737206f954ee6c2b8379ef.
//
// Solidity: event ExtendTime(uint256 time)
func (_UpKeeping *UpKeepingFilterer) WatchExtendTime(opts *bind.WatchOpts, sink chan<- *UpKeepingExtendTime) (event.Subscription, error) {

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "ExtendTime")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingExtendTime)
				if err := _UpKeeping.contract.UnpackLog(event, "ExtendTime", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExtendTime is a log parse operation binding the contract event 0x890f3f02e32798c719ac4ee5a0fe9b2a4f8bface63737206f954ee6c2b8379ef.
//
// Solidity: event ExtendTime(uint256 time)
func (_UpKeeping *UpKeepingFilterer) ParseExtendTime(log types.Log) (*UpKeepingExtendTime, error) {
	event := new(UpKeepingExtendTime)
	if err := _UpKeeping.contract.UnpackLog(event, "ExtendTime", log); err != nil {
		return nil, err
	}
	return event, nil
}

// UpKeepingPayIterator is returned from FilterPay and is used to iterate over the raw logs and unpacked data for Pay events raised by the UpKeeping contract.
type UpKeepingPayIterator struct {
	Event *UpKeepingPay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingPayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingPay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingPay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingPayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingPayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingPay represents a Pay event raised by the UpKeeping contract.
type UpKeepingPay struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterPay is a free log retrieval operation binding the contract event 0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d.
//
// Solidity: event Pay(address indexed from, address indexed to, uint256 value)
func (_UpKeeping *UpKeepingFilterer) FilterPay(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*UpKeepingPayIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "Pay", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &UpKeepingPayIterator{contract: _UpKeeping.contract, event: "Pay", logs: logs, sub: sub}, nil
}

// WatchPay is a free log subscription operation binding the contract event 0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d.
//
// Solidity: event Pay(address indexed from, address indexed to, uint256 value)
func (_UpKeeping *UpKeepingFilterer) WatchPay(opts *bind.WatchOpts, sink chan<- *UpKeepingPay, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "Pay", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingPay)
				if err := _UpKeeping.contract.UnpackLog(event, "Pay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePay is a log parse operation binding the contract event 0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d.
//
// Solidity: event Pay(address indexed from, address indexed to, uint256 value)
func (_UpKeeping *UpKeepingFilterer) ParsePay(log types.Log) (*UpKeepingPay, error) {
	event := new(UpKeepingPay)
	if err := _UpKeeping.contract.UnpackLog(event, "Pay", log); err != nil {
		return nil, err
	}
	return event, nil
}
