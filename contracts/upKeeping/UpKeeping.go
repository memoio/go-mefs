// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package upKeeping

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// UpKeepingKPInfo is an auto generated low-level Go binding around an user-defined struct.
type UpKeepingKPInfo struct {
	Stop     bool
	Addr     common.Address
	StEnd    *big.Int
	PayIndex *big.Int
	Money    []*big.Int
}

// UpKeepingProof is an auto generated low-level Go binding around an user-defined struct.
type UpKeepingProof struct {
	StStart    *big.Int
	StLength   *big.Int
	StValue    *big.Int
	Keeper     common.Address
	Provider   common.Address
	MerkleRoot [32]byte
}

// UpKeepingABI is the input ABI used to generate the binding from.
const UpKeepingABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_query\",\"type\":\"address\"},{\"internalType\":\"addresspayable[]\",\"name\":\"_keepers\",\"type\":\"address[]\"},{\"internalType\":\"addresspayable[]\",\"name\":\"_providers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cycle\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AddOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"AddProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AlterOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ExtendTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"addresspayable[]\",\"name\":\"_providers\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sign\",\"type\":\"bytes[]\"}],\"name\":\"addProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"alterOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addTime\",\"type\":\"uint256\"}],\"name\":\"extendTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"},{\"internalType\":\"addresspayable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"money\",\"type\":\"uint256[]\"}],\"internalType\":\"structUpKeeping.KPInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"},{\"internalType\":\"addresspayable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"money\",\"type\":\"uint256[]\"}],\"internalType\":\"structUpKeeping.KPInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkle_root\",\"type\":\"bytes32\"}],\"internalType\":\"structUpKeeping.Proof[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"sign\",\"type\":\"bytes[]\"}],\"name\":\"setKeeperStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"sign\",\"type\":\"bytes[]\"}],\"name\":\"setProviderStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stLength\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_merkle_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"share\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sign\",\"type\":\"bytes[]\"}],\"name\":\"spaceTimePay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]"

// UpKeepingBin is the compiled bytecode used for deploying new contracts.
var UpKeepingBin = ""

// DeployUpKeeping deploys a new Ethereum contract, binding an instance of UpKeeping to it.
func DeployUpKeeping(auth *bind.TransactOpts, backend bind.ContractBackend, _query common.Address, _keepers []common.Address, _providers []common.Address, _time *big.Int, _size *big.Int, _price *big.Int, _cycle *big.Int) (common.Address, *types.Transaction, *UpKeeping, error) {
	parsed, err := abi.JSON(strings.NewReader(UpKeepingABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(UpKeepingBin), backend, _query, _keepers, _providers, _time, _size, _price, _cycle)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UpKeeping{UpKeepingCaller: UpKeepingCaller{contract: contract}, UpKeepingTransactor: UpKeepingTransactor{contract: contract}, UpKeepingFilterer: UpKeepingFilterer{contract: contract}}, nil
}

// UpKeeping is an auto generated Go binding around an Ethereum contract.
type UpKeeping struct {
	UpKeepingCaller     // Read-only binding to the contract
	UpKeepingTransactor // Write-only binding to the contract
	UpKeepingFilterer   // Log filterer for contract events
}

// UpKeepingCaller is an auto generated read-only Go binding around an Ethereum contract.
type UpKeepingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpKeepingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UpKeepingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpKeepingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UpKeepingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UpKeepingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UpKeepingSession struct {
	Contract     *UpKeeping        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UpKeepingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UpKeepingCallerSession struct {
	Contract *UpKeepingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// UpKeepingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UpKeepingTransactorSession struct {
	Contract     *UpKeepingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// UpKeepingRaw is an auto generated low-level Go binding around an Ethereum contract.
type UpKeepingRaw struct {
	Contract *UpKeeping // Generic contract binding to access the raw methods on
}

// UpKeepingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UpKeepingCallerRaw struct {
	Contract *UpKeepingCaller // Generic read-only contract binding to access the raw methods on
}

// UpKeepingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UpKeepingTransactorRaw struct {
	Contract *UpKeepingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUpKeeping creates a new instance of UpKeeping, bound to a specific deployed contract.
func NewUpKeeping(address common.Address, backend bind.ContractBackend) (*UpKeeping, error) {
	contract, err := bindUpKeeping(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UpKeeping{UpKeepingCaller: UpKeepingCaller{contract: contract}, UpKeepingTransactor: UpKeepingTransactor{contract: contract}, UpKeepingFilterer: UpKeepingFilterer{contract: contract}}, nil
}

// NewUpKeepingCaller creates a new read-only instance of UpKeeping, bound to a specific deployed contract.
func NewUpKeepingCaller(address common.Address, caller bind.ContractCaller) (*UpKeepingCaller, error) {
	contract, err := bindUpKeeping(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UpKeepingCaller{contract: contract}, nil
}

// NewUpKeepingTransactor creates a new write-only instance of UpKeeping, bound to a specific deployed contract.
func NewUpKeepingTransactor(address common.Address, transactor bind.ContractTransactor) (*UpKeepingTransactor, error) {
	contract, err := bindUpKeeping(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UpKeepingTransactor{contract: contract}, nil
}

// NewUpKeepingFilterer creates a new log filterer instance of UpKeeping, bound to a specific deployed contract.
func NewUpKeepingFilterer(address common.Address, filterer bind.ContractFilterer) (*UpKeepingFilterer, error) {
	contract, err := bindUpKeeping(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UpKeepingFilterer{contract: contract}, nil
}

// bindUpKeeping binds a generic wrapper to an already deployed contract.
func bindUpKeeping(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(UpKeepingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpKeeping *UpKeepingRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UpKeeping.Contract.UpKeepingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpKeeping *UpKeepingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpKeeping.Contract.UpKeepingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpKeeping *UpKeepingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpKeeping.Contract.UpKeepingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UpKeeping *UpKeepingCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _UpKeeping.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UpKeeping *UpKeepingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpKeeping.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UpKeeping *UpKeepingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UpKeeping.Contract.contract.Transact(opts, method, params...)
}

// GetOrder is a free data retrieval call binding the contract method 0xd36dedd2.
//
// Solidity: function getOrder() view returns(address, (bool,address,uint256,uint256,uint256[])[], (bool,address,uint256,uint256,uint256[])[], uint256, uint256, uint256, uint256, uint256, uint256, uint256, (uint256,uint256,uint256,address,address,bytes32)[])
func (_UpKeeping *UpKeepingCaller) GetOrder(opts *bind.CallOpts) (common.Address, []UpKeepingKPInfo, []UpKeepingKPInfo, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, []UpKeepingProof, error) {
	var (
		ret0  = new(common.Address)
		ret1  = new([]UpKeepingKPInfo)
		ret2  = new([]UpKeepingKPInfo)
		ret3  = new(*big.Int)
		ret4  = new(*big.Int)
		ret5  = new(*big.Int)
		ret6  = new(*big.Int)
		ret7  = new(*big.Int)
		ret8  = new(*big.Int)
		ret9  = new(*big.Int)
		ret10 = new([]UpKeepingProof)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
		ret5,
		ret6,
		ret7,
		ret8,
		ret9,
		ret10,
	}
	err := _UpKeeping.contract.Call(opts, out, "getOrder")
	return *ret0, *ret1, *ret2, *ret3, *ret4, *ret5, *ret6, *ret7, *ret8, *ret9, *ret10, err
}

// GetOrder is a free data retrieval call binding the contract method 0xd36dedd2.
//
// Solidity: function getOrder() view returns(address, (bool,address,uint256,uint256,uint256[])[], (bool,address,uint256,uint256,uint256[])[], uint256, uint256, uint256, uint256, uint256, uint256, uint256, (uint256,uint256,uint256,address,address,bytes32)[])
func (_UpKeeping *UpKeepingSession) GetOrder() (common.Address, []UpKeepingKPInfo, []UpKeepingKPInfo, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, []UpKeepingProof, error) {
	return _UpKeeping.Contract.GetOrder(&_UpKeeping.CallOpts)
}

// GetOrder is a free data retrieval call binding the contract method 0xd36dedd2.
//
// Solidity: function getOrder() view returns(address, (bool,address,uint256,uint256,uint256[])[], (bool,address,uint256,uint256,uint256[])[], uint256, uint256, uint256, uint256, uint256, uint256, uint256, (uint256,uint256,uint256,address,address,bytes32)[])
func (_UpKeeping *UpKeepingCallerSession) GetOrder() (common.Address, []UpKeepingKPInfo, []UpKeepingKPInfo, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, *big.Int, []UpKeepingProof, error) {
	return _UpKeeping.Contract.GetOrder(&_UpKeeping.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_UpKeeping *UpKeepingCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _UpKeeping.contract.Call(opts, out, "getOwner")
	return *ret0, err
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_UpKeeping *UpKeepingSession) GetOwner() (common.Address, error) {
	return _UpKeeping.Contract.GetOwner(&_UpKeeping.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_UpKeeping *UpKeepingCallerSession) GetOwner() (common.Address, error) {
	return _UpKeeping.Contract.GetOwner(&_UpKeeping.CallOpts)
}

// AddProvider is a paid mutator transaction binding the contract method 0x8b296788.
//
// Solidity: function addProvider(address[] _providers, bytes[] sign) returns(bool)
func (_UpKeeping *UpKeepingTransactor) AddProvider(opts *bind.TransactOpts, _providers []common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "addProvider", _providers, sign)
}

// AddProvider is a paid mutator transaction binding the contract method 0x8b296788.
//
// Solidity: function addProvider(address[] _providers, bytes[] sign) returns(bool)
func (_UpKeeping *UpKeepingSession) AddProvider(_providers []common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.AddProvider(&_UpKeeping.TransactOpts, _providers, sign)
}

// AddProvider is a paid mutator transaction binding the contract method 0x8b296788.
//
// Solidity: function addProvider(address[] _providers, bytes[] sign) returns(bool)
func (_UpKeeping *UpKeepingTransactorSession) AddProvider(_providers []common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.AddProvider(&_UpKeeping.TransactOpts, _providers, sign)
}

// AlterOwner is a paid mutator transaction binding the contract method 0x0ca05f9f.
//
// Solidity: function alterOwner(address newOwner) returns(bool)
func (_UpKeeping *UpKeepingTransactor) AlterOwner(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "alterOwner", newOwner)
}

// AlterOwner is a paid mutator transaction binding the contract method 0x0ca05f9f.
//
// Solidity: function alterOwner(address newOwner) returns(bool)
func (_UpKeeping *UpKeepingSession) AlterOwner(newOwner common.Address) (*types.Transaction, error) {
	return _UpKeeping.Contract.AlterOwner(&_UpKeeping.TransactOpts, newOwner)
}

// AlterOwner is a paid mutator transaction binding the contract method 0x0ca05f9f.
//
// Solidity: function alterOwner(address newOwner) returns(bool)
func (_UpKeeping *UpKeepingTransactorSession) AlterOwner(newOwner common.Address) (*types.Transaction, error) {
	return _UpKeeping.Contract.AlterOwner(&_UpKeeping.TransactOpts, newOwner)
}

// Destruct is a paid mutator transaction binding the contract method 0x2b68b9c6.
//
// Solidity: function destruct() returns()
func (_UpKeeping *UpKeepingTransactor) Destruct(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "destruct")
}

// Destruct is a paid mutator transaction binding the contract method 0x2b68b9c6.
//
// Solidity: function destruct() returns()
func (_UpKeeping *UpKeepingSession) Destruct() (*types.Transaction, error) {
	return _UpKeeping.Contract.Destruct(&_UpKeeping.TransactOpts)
}

// Destruct is a paid mutator transaction binding the contract method 0x2b68b9c6.
//
// Solidity: function destruct() returns()
func (_UpKeeping *UpKeepingTransactorSession) Destruct() (*types.Transaction, error) {
	return _UpKeeping.Contract.Destruct(&_UpKeeping.TransactOpts)
}

// ExtendTime is a paid mutator transaction binding the contract method 0xa27aebbc.
//
// Solidity: function extendTime(uint256 addTime) returns()
func (_UpKeeping *UpKeepingTransactor) ExtendTime(opts *bind.TransactOpts, addTime *big.Int) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "extendTime", addTime)
}

// ExtendTime is a paid mutator transaction binding the contract method 0xa27aebbc.
//
// Solidity: function extendTime(uint256 addTime) returns()
func (_UpKeeping *UpKeepingSession) ExtendTime(addTime *big.Int) (*types.Transaction, error) {
	return _UpKeeping.Contract.ExtendTime(&_UpKeeping.TransactOpts, addTime)
}

// ExtendTime is a paid mutator transaction binding the contract method 0xa27aebbc.
//
// Solidity: function extendTime(uint256 addTime) returns()
func (_UpKeeping *UpKeepingTransactorSession) ExtendTime(addTime *big.Int) (*types.Transaction, error) {
	return _UpKeeping.Contract.ExtendTime(&_UpKeeping.TransactOpts, addTime)
}

// SetKeeperStop is a paid mutator transaction binding the contract method 0xd187ec03.
//
// Solidity: function setKeeperStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingTransactor) SetKeeperStop(opts *bind.TransactOpts, _addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "setKeeperStop", _addr, sign)
}

// SetKeeperStop is a paid mutator transaction binding the contract method 0xd187ec03.
//
// Solidity: function setKeeperStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingSession) SetKeeperStop(_addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SetKeeperStop(&_UpKeeping.TransactOpts, _addr, sign)
}

// SetKeeperStop is a paid mutator transaction binding the contract method 0xd187ec03.
//
// Solidity: function setKeeperStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingTransactorSession) SetKeeperStop(_addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SetKeeperStop(&_UpKeeping.TransactOpts, _addr, sign)
}

// SetProviderStop is a paid mutator transaction binding the contract method 0xd0620876.
//
// Solidity: function setProviderStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingTransactor) SetProviderStop(opts *bind.TransactOpts, _addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "setProviderStop", _addr, sign)
}

// SetProviderStop is a paid mutator transaction binding the contract method 0xd0620876.
//
// Solidity: function setProviderStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingSession) SetProviderStop(_addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SetProviderStop(&_UpKeeping.TransactOpts, _addr, sign)
}

// SetProviderStop is a paid mutator transaction binding the contract method 0xd0620876.
//
// Solidity: function setProviderStop(address _addr, bytes[] sign) returns()
func (_UpKeeping *UpKeepingTransactorSession) SetProviderStop(_addr common.Address, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SetProviderStop(&_UpKeeping.TransactOpts, _addr, sign)
}

// SpaceTimePay is a paid mutator transaction binding the contract method 0xd063e733.
//
// Solidity: function spaceTimePay(address _provider, uint256 _stValue, uint256 _stStart, uint256 _stLength, bytes32 _merkle_root, uint256[] share, bytes[] sign) payable returns()
func (_UpKeeping *UpKeepingTransactor) SpaceTimePay(opts *bind.TransactOpts, _provider common.Address, _stValue *big.Int, _stStart *big.Int, _stLength *big.Int, _merkle_root [32]byte, share []*big.Int, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.contract.Transact(opts, "spaceTimePay", _provider, _stValue, _stStart, _stLength, _merkle_root, share, sign)
}

// SpaceTimePay is a paid mutator transaction binding the contract method 0xd063e733.
//
// Solidity: function spaceTimePay(address _provider, uint256 _stValue, uint256 _stStart, uint256 _stLength, bytes32 _merkle_root, uint256[] share, bytes[] sign) payable returns()
func (_UpKeeping *UpKeepingSession) SpaceTimePay(_provider common.Address, _stValue *big.Int, _stStart *big.Int, _stLength *big.Int, _merkle_root [32]byte, share []*big.Int, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SpaceTimePay(&_UpKeeping.TransactOpts, _provider, _stValue, _stStart, _stLength, _merkle_root, share, sign)
}

// SpaceTimePay is a paid mutator transaction binding the contract method 0xd063e733.
//
// Solidity: function spaceTimePay(address _provider, uint256 _stValue, uint256 _stStart, uint256 _stLength, bytes32 _merkle_root, uint256[] share, bytes[] sign) payable returns()
func (_UpKeeping *UpKeepingTransactorSession) SpaceTimePay(_provider common.Address, _stValue *big.Int, _stStart *big.Int, _stLength *big.Int, _merkle_root [32]byte, share []*big.Int, sign [][]byte) (*types.Transaction, error) {
	return _UpKeeping.Contract.SpaceTimePay(&_UpKeeping.TransactOpts, _provider, _stValue, _stStart, _stLength, _merkle_root, share, sign)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UpKeeping *UpKeepingTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UpKeeping.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UpKeeping *UpKeepingSession) Receive() (*types.Transaction, error) {
	return _UpKeeping.Contract.Receive(&_UpKeeping.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UpKeeping *UpKeepingTransactorSession) Receive() (*types.Transaction, error) {
	return _UpKeeping.Contract.Receive(&_UpKeeping.TransactOpts)
}

// UpKeepingAddOrderIterator is returned from FilterAddOrder and is used to iterate over the raw logs and unpacked data for AddOrder events raised by the UpKeeping contract.
type UpKeepingAddOrderIterator struct {
	Event *UpKeepingAddOrder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingAddOrderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingAddOrder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingAddOrder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingAddOrderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingAddOrderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingAddOrder represents a AddOrder event raised by the UpKeeping contract.
type UpKeepingAddOrder struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterAddOrder is a free log retrieval operation binding the contract event 0x0905316f7faca135c292b6e6f8d91c19128d372722215fe029e74e75ef84c087.
//
// Solidity: event AddOrder()
func (_UpKeeping *UpKeepingFilterer) FilterAddOrder(opts *bind.FilterOpts) (*UpKeepingAddOrderIterator, error) {

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "AddOrder")
	if err != nil {
		return nil, err
	}
	return &UpKeepingAddOrderIterator{contract: _UpKeeping.contract, event: "AddOrder", logs: logs, sub: sub}, nil
}

// WatchAddOrder is a free log subscription operation binding the contract event 0x0905316f7faca135c292b6e6f8d91c19128d372722215fe029e74e75ef84c087.
//
// Solidity: event AddOrder()
func (_UpKeeping *UpKeepingFilterer) WatchAddOrder(opts *bind.WatchOpts, sink chan<- *UpKeepingAddOrder) (event.Subscription, error) {

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "AddOrder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingAddOrder)
				if err := _UpKeeping.contract.UnpackLog(event, "AddOrder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddOrder is a log parse operation binding the contract event 0x0905316f7faca135c292b6e6f8d91c19128d372722215fe029e74e75ef84c087.
//
// Solidity: event AddOrder()
func (_UpKeeping *UpKeepingFilterer) ParseAddOrder(log types.Log) (*UpKeepingAddOrder, error) {
	event := new(UpKeepingAddOrder)
	if err := _UpKeeping.contract.UnpackLog(event, "AddOrder", log); err != nil {
		return nil, err
	}
	return event, nil
}

// UpKeepingAddProviderIterator is returned from FilterAddProvider and is used to iterate over the raw logs and unpacked data for AddProvider events raised by the UpKeeping contract.
type UpKeepingAddProviderIterator struct {
	Event *UpKeepingAddProvider // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingAddProviderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingAddProvider)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingAddProvider)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingAddProviderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingAddProviderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingAddProvider represents a AddProvider event raised by the UpKeeping contract.
type UpKeepingAddProvider struct {
	From     common.Address
	Provider common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAddProvider is a free log retrieval operation binding the contract event 0xa35ad2ad5abe8a31481d418a51abda97be91ba2616927300d0b75a0c340e3307.
//
// Solidity: event AddProvider(address indexed from, address provider)
func (_UpKeeping *UpKeepingFilterer) FilterAddProvider(opts *bind.FilterOpts, from []common.Address) (*UpKeepingAddProviderIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "AddProvider", fromRule)
	if err != nil {
		return nil, err
	}
	return &UpKeepingAddProviderIterator{contract: _UpKeeping.contract, event: "AddProvider", logs: logs, sub: sub}, nil
}

// WatchAddProvider is a free log subscription operation binding the contract event 0xa35ad2ad5abe8a31481d418a51abda97be91ba2616927300d0b75a0c340e3307.
//
// Solidity: event AddProvider(address indexed from, address provider)
func (_UpKeeping *UpKeepingFilterer) WatchAddProvider(opts *bind.WatchOpts, sink chan<- *UpKeepingAddProvider, from []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "AddProvider", fromRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingAddProvider)
				if err := _UpKeeping.contract.UnpackLog(event, "AddProvider", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddProvider is a log parse operation binding the contract event 0xa35ad2ad5abe8a31481d418a51abda97be91ba2616927300d0b75a0c340e3307.
//
// Solidity: event AddProvider(address indexed from, address provider)
func (_UpKeeping *UpKeepingFilterer) ParseAddProvider(log types.Log) (*UpKeepingAddProvider, error) {
	event := new(UpKeepingAddProvider)
	if err := _UpKeeping.contract.UnpackLog(event, "AddProvider", log); err != nil {
		return nil, err
	}
	return event, nil
}

// UpKeepingAlterOwnerIterator is returned from FilterAlterOwner and is used to iterate over the raw logs and unpacked data for AlterOwner events raised by the UpKeeping contract.
type UpKeepingAlterOwnerIterator struct {
	Event *UpKeepingAlterOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingAlterOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingAlterOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingAlterOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingAlterOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingAlterOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingAlterOwner represents a AlterOwner event raised by the UpKeeping contract.
type UpKeepingAlterOwner struct {
	From common.Address
	To   common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAlterOwner is a free log retrieval operation binding the contract event 0x8c153ecee6895f15da72e646b4029e0ef7cbf971986d8d9cfe48c5563d368e90.
//
// Solidity: event AlterOwner(address from, address to)
func (_UpKeeping *UpKeepingFilterer) FilterAlterOwner(opts *bind.FilterOpts) (*UpKeepingAlterOwnerIterator, error) {

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "AlterOwner")
	if err != nil {
		return nil, err
	}
	return &UpKeepingAlterOwnerIterator{contract: _UpKeeping.contract, event: "AlterOwner", logs: logs, sub: sub}, nil
}

// WatchAlterOwner is a free log subscription operation binding the contract event 0x8c153ecee6895f15da72e646b4029e0ef7cbf971986d8d9cfe48c5563d368e90.
//
// Solidity: event AlterOwner(address from, address to)
func (_UpKeeping *UpKeepingFilterer) WatchAlterOwner(opts *bind.WatchOpts, sink chan<- *UpKeepingAlterOwner) (event.Subscription, error) {

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "AlterOwner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingAlterOwner)
				if err := _UpKeeping.contract.UnpackLog(event, "AlterOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlterOwner is a log parse operation binding the contract event 0x8c153ecee6895f15da72e646b4029e0ef7cbf971986d8d9cfe48c5563d368e90.
//
// Solidity: event AlterOwner(address from, address to)
func (_UpKeeping *UpKeepingFilterer) ParseAlterOwner(log types.Log) (*UpKeepingAlterOwner, error) {
	event := new(UpKeepingAlterOwner)
	if err := _UpKeeping.contract.UnpackLog(event, "AlterOwner", log); err != nil {
		return nil, err
	}
	return event, nil
}

// UpKeepingExtendTimeIterator is returned from FilterExtendTime and is used to iterate over the raw logs and unpacked data for ExtendTime events raised by the UpKeeping contract.
type UpKeepingExtendTimeIterator struct {
	Event *UpKeepingExtendTime // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingExtendTimeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingExtendTime)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingExtendTime)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingExtendTimeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingExtendTimeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingExtendTime represents a ExtendTime event raised by the UpKeeping contract.
type UpKeepingExtendTime struct {
	Time *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterExtendTime is a free log retrieval operation binding the contract event 0x890f3f02e32798c719ac4ee5a0fe9b2a4f8bface63737206f954ee6c2b8379ef.
//
// Solidity: event ExtendTime(uint256 time)
func (_UpKeeping *UpKeepingFilterer) FilterExtendTime(opts *bind.FilterOpts) (*UpKeepingExtendTimeIterator, error) {

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "ExtendTime")
	if err != nil {
		return nil, err
	}
	return &UpKeepingExtendTimeIterator{contract: _UpKeeping.contract, event: "ExtendTime", logs: logs, sub: sub}, nil
}

// WatchExtendTime is a free log subscription operation binding the contract event 0x890f3f02e32798c719ac4ee5a0fe9b2a4f8bface63737206f954ee6c2b8379ef.
//
// Solidity: event ExtendTime(uint256 time)
func (_UpKeeping *UpKeepingFilterer) WatchExtendTime(opts *bind.WatchOpts, sink chan<- *UpKeepingExtendTime) (event.Subscription, error) {

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "ExtendTime")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingExtendTime)
				if err := _UpKeeping.contract.UnpackLog(event, "ExtendTime", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExtendTime is a log parse operation binding the contract event 0x890f3f02e32798c719ac4ee5a0fe9b2a4f8bface63737206f954ee6c2b8379ef.
//
// Solidity: event ExtendTime(uint256 time)
func (_UpKeeping *UpKeepingFilterer) ParseExtendTime(log types.Log) (*UpKeepingExtendTime, error) {
	event := new(UpKeepingExtendTime)
	if err := _UpKeeping.contract.UnpackLog(event, "ExtendTime", log); err != nil {
		return nil, err
	}
	return event, nil
}

// UpKeepingPayIterator is returned from FilterPay and is used to iterate over the raw logs and unpacked data for Pay events raised by the UpKeeping contract.
type UpKeepingPayIterator struct {
	Event *UpKeepingPay // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UpKeepingPayIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UpKeepingPay)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UpKeepingPay)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UpKeepingPayIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UpKeepingPayIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UpKeepingPay represents a Pay event raised by the UpKeeping contract.
type UpKeepingPay struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterPay is a free log retrieval operation binding the contract event 0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d.
//
// Solidity: event Pay(address indexed from, address indexed to, uint256 value)
func (_UpKeeping *UpKeepingFilterer) FilterPay(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*UpKeepingPayIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _UpKeeping.contract.FilterLogs(opts, "Pay", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &UpKeepingPayIterator{contract: _UpKeeping.contract, event: "Pay", logs: logs, sub: sub}, nil
}

// WatchPay is a free log subscription operation binding the contract event 0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d.
//
// Solidity: event Pay(address indexed from, address indexed to, uint256 value)
func (_UpKeeping *UpKeepingFilterer) WatchPay(opts *bind.WatchOpts, sink chan<- *UpKeepingPay, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _UpKeeping.contract.WatchLogs(opts, "Pay", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UpKeepingPay)
				if err := _UpKeeping.contract.UnpackLog(event, "Pay", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePay is a log parse operation binding the contract event 0x288d9a5737d39d766acb848da277a970d9ee31f9115e17490b9393e282fa7b4d.
//
// Solidity: event Pay(address indexed from, address indexed to, uint256 value)
func (_UpKeeping *UpKeepingFilterer) ParsePay(log types.Log) (*UpKeepingPay, error) {
	event := new(UpKeepingPay)
	if err := _UpKeeping.contract.UnpackLog(event, "Pay", log); err != nil {
		return nil, err
	}
	return event, nil
}
