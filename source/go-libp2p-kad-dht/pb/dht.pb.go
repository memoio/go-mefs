// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dht.proto

package dht_pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	pb "github.com/memoio/go-mefs/pb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message_MessageType int32

const (
	Message_PUT_VALUE     Message_MessageType = 0
	Message_GET_VALUE     Message_MessageType = 1
	Message_ADD_PROVIDER  Message_MessageType = 2
	Message_GET_PROVIDERS Message_MessageType = 3
	Message_FIND_NODE     Message_MessageType = 4
	Message_PING          Message_MessageType = 5
	Message_MetaInfo      Message_MessageType = 6
)

var Message_MessageType_name = map[int32]string{
	0: "PUT_VALUE",
	1: "GET_VALUE",
	2: "ADD_PROVIDER",
	3: "GET_PROVIDERS",
	4: "FIND_NODE",
	5: "PING",
	6: "MetaInfo",
}

var Message_MessageType_value = map[string]int32{
	"PUT_VALUE":     0,
	"GET_VALUE":     1,
	"ADD_PROVIDER":  2,
	"GET_PROVIDERS": 3,
	"FIND_NODE":     4,
	"PING":          5,
	"MetaInfo":      6,
}

func (x Message_MessageType) String() string {
	return proto.EnumName(Message_MessageType_name, int32(x))
}

func (Message_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_616a434b24c97ff4, []int{0, 0}
}

type Message_ConnectionType int32

const (
	// sender does not have a connection to peer, and no extra information (default)
	Message_NOT_CONNECTED Message_ConnectionType = 0
	// sender has a live connection to peer
	Message_CONNECTED Message_ConnectionType = 1
	// sender recently connected to peer
	Message_CAN_CONNECT Message_ConnectionType = 2
	// sender recently tried to connect to peer repeatedly but failed to connect
	// ("try" here is loose, but this should signal "made strong effort, failed")
	Message_CANNOT_CONNECT Message_ConnectionType = 3
)

var Message_ConnectionType_name = map[int32]string{
	0: "NOT_CONNECTED",
	1: "CONNECTED",
	2: "CAN_CONNECT",
	3: "CANNOT_CONNECT",
}

var Message_ConnectionType_value = map[string]int32{
	"NOT_CONNECTED":  0,
	"CONNECTED":      1,
	"CAN_CONNECT":    2,
	"CANNOT_CONNECT": 3,
}

func (x Message_ConnectionType) String() string {
	return proto.EnumName(Message_ConnectionType_name, int32(x))
}

func (Message_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_616a434b24c97ff4, []int{0, 1}
}

type Message struct {
	// defines what type of message it is.
	Type   Message_MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=dht.pb.Message_MessageType" json:"type,omitempty"`
	OpType int32               `protobuf:"varint,2,opt,name=opType,proto3" json:"opType,omitempty"`
	// Used to specify the key associated with this message.
	// PUT_VALUE, GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
	Key []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Used to return a value
	// PUT_VALUE, GET_VALUE
	Record *pb.Record `protobuf:"bytes,4,opt,name=record,proto3" json:"record,omitempty"`
	ErrMsg bool       `protobuf:"varint,5,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	// Used to return peers closer to a key in a query
	// GET_VALUE, GET_PROVIDERS, FIND_NODE
	CloserPeers []*Message_Peer `protobuf:"bytes,8,rep,name=closerPeers,proto3" json:"closerPeers,omitempty"`
	// Used to return Providers
	// GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
	ProviderPeers        []*Message_Peer `protobuf:"bytes,9,rep,name=providerPeers,proto3" json:"providerPeers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_616a434b24c97ff4, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() Message_MessageType {
	if m != nil {
		return m.Type
	}
	return Message_PUT_VALUE
}

func (m *Message) GetOpType() int32 {
	if m != nil {
		return m.OpType
	}
	return 0
}

func (m *Message) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Message) GetRecord() *pb.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *Message) GetErrMsg() bool {
	if m != nil {
		return m.ErrMsg
	}
	return false
}

func (m *Message) GetCloserPeers() []*Message_Peer {
	if m != nil {
		return m.CloserPeers
	}
	return nil
}

func (m *Message) GetProviderPeers() []*Message_Peer {
	if m != nil {
		return m.ProviderPeers
	}
	return nil
}

type Message_Peer struct {
	// ID of a given peer.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// multiaddrs for a given peer
	Addrs [][]byte `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
	// used to signal the sender's connection capabilities to the peer
	Connection           Message_ConnectionType `protobuf:"varint,3,opt,name=connection,proto3,enum=dht.pb.Message_ConnectionType" json:"connection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Message_Peer) Reset()         { *m = Message_Peer{} }
func (m *Message_Peer) String() string { return proto.CompactTextString(m) }
func (*Message_Peer) ProtoMessage()    {}
func (*Message_Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_616a434b24c97ff4, []int{0, 0}
}
func (m *Message_Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message_Peer.Unmarshal(m, b)
}
func (m *Message_Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message_Peer.Marshal(b, m, deterministic)
}
func (m *Message_Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message_Peer.Merge(m, src)
}
func (m *Message_Peer) XXX_Size() int {
	return xxx_messageInfo_Message_Peer.Size(m)
}
func (m *Message_Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Message_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Message_Peer proto.InternalMessageInfo

func (m *Message_Peer) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Message_Peer) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *Message_Peer) GetConnection() Message_ConnectionType {
	if m != nil {
		return m.Connection
	}
	return Message_NOT_CONNECTED
}

func init() {
	proto.RegisterEnum("dht.pb.Message_MessageType", Message_MessageType_name, Message_MessageType_value)
	proto.RegisterEnum("dht.pb.Message_ConnectionType", Message_ConnectionType_name, Message_ConnectionType_value)
	proto.RegisterType((*Message)(nil), "dht.pb.Message")
	proto.RegisterType((*Message_Peer)(nil), "dht.pb.Message.Peer")
}

func init() { proto.RegisterFile("dht.proto", fileDescriptor_616a434b24c97ff4) }

var fileDescriptor_616a434b24c97ff4 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xdf, 0x8b, 0x9b, 0x40,
	0x10, 0xc7, 0xeb, 0x8f, 0xd8, 0x64, 0x34, 0xde, 0x76, 0x38, 0x8a, 0x5c, 0xa1, 0x48, 0x5e, 0xce,
	0x97, 0x2a, 0xa4, 0xd0, 0x87, 0x3e, 0x14, 0x82, 0xda, 0x23, 0xd0, 0x6c, 0xc2, 0x36, 0x77, 0x7d,
	0x0c, 0x51, 0xf7, 0x72, 0xd2, 0x4b, 0x56, 0x56, 0xdb, 0x92, 0x3f, 0xb5, 0xff, 0x4d, 0x59, 0x8d,
	0x6d, 0xee, 0x1e, 0xfa, 0xb4, 0xf3, 0x99, 0xf9, 0x7e, 0x67, 0xc6, 0x41, 0x18, 0x15, 0x0f, 0x4d,
	0x58, 0x49, 0xd1, 0x08, 0xb4, 0xda, 0x30, 0xbb, 0xba, 0xde, 0x95, 0xcd, 0xc3, 0x8f, 0x2c, 0xcc,
	0xc5, 0x3e, 0xda, 0xf3, 0xbd, 0x28, 0x45, 0xb4, 0x13, 0xef, 0xf6, 0xfc, 0xbe, 0x8e, 0xaa, 0x2c,
	0x52, 0x6f, 0x67, 0x98, 0xfc, 0x36, 0xe1, 0xe5, 0x82, 0xd7, 0xf5, 0x76, 0xc7, 0x31, 0x02, 0xb3,
	0x39, 0x56, 0xdc, 0xd3, 0x7c, 0x2d, 0x70, 0xa7, 0x6f, 0xc2, 0xae, 0x57, 0x78, 0x2a, 0xf7, 0xef,
	0xfa, 0x58, 0x71, 0xd6, 0x0a, 0xf1, 0x35, 0x58, 0xa2, 0x52, 0xec, 0xe9, 0xbe, 0x16, 0x0c, 0xd8,
	0x89, 0x90, 0x80, 0xf1, 0x9d, 0x1f, 0x3d, 0xc3, 0xd7, 0x02, 0x87, 0xa9, 0x10, 0xaf, 0xc1, 0x92,
	0x3c, 0x17, 0xb2, 0xf0, 0x4c, 0x5f, 0x0b, 0xec, 0xe9, 0x45, 0xd8, 0xed, 0x90, 0x85, 0xac, 0x4d,
	0xb3, 0x53, 0x59, 0xb5, 0xe4, 0x52, 0x2e, 0xea, 0x9d, 0x37, 0xf0, 0xb5, 0x60, 0xc8, 0x4e, 0x84,
	0x1f, 0xc0, 0xce, 0x1f, 0x45, 0xcd, 0xe5, 0x8a, 0x73, 0x59, 0x7b, 0x43, 0xdf, 0x08, 0xec, 0xe9,
	0xe5, 0xf3, 0x15, 0x55, 0x91, 0x9d, 0x0b, 0xf1, 0x23, 0x8c, 0x2b, 0x29, 0x7e, 0x96, 0x45, 0xef,
	0x1c, 0xfd, 0xc7, 0xf9, 0x54, 0x7a, 0xf5, 0x08, 0xa6, 0x0a, 0xd0, 0x05, 0xbd, 0x2c, 0xda, 0xab,
	0x38, 0x4c, 0x2f, 0x0b, 0xbc, 0x84, 0xc1, 0xb6, 0x28, 0x64, 0xed, 0xe9, 0xbe, 0x11, 0x38, 0xac,
	0x03, 0xfc, 0x04, 0x90, 0x8b, 0xc3, 0x81, 0xe7, 0x4d, 0x29, 0x0e, 0xed, 0xb7, 0xbb, 0xd3, 0xb7,
	0xcf, 0xc7, 0xc4, 0x7f, 0x15, 0xed, 0x19, 0xcf, 0x1c, 0x93, 0x5f, 0x60, 0x9f, 0x5d, 0x18, 0xc7,
	0x30, 0x5a, 0xdd, 0xae, 0x37, 0x77, 0xb3, 0x2f, 0xb7, 0x29, 0x79, 0xa1, 0xf0, 0x26, 0xed, 0x51,
	0x43, 0x02, 0xce, 0x2c, 0x49, 0x36, 0x2b, 0xb6, 0xbc, 0x9b, 0x27, 0x29, 0x23, 0x3a, 0xbe, 0x82,
	0xb1, 0x12, 0xf4, 0x99, 0xaf, 0xc4, 0x50, 0x9e, 0xcf, 0x73, 0x9a, 0x6c, 0xe8, 0x32, 0x49, 0x89,
	0x89, 0x43, 0x30, 0x57, 0x73, 0x7a, 0x43, 0x06, 0xe8, 0xc0, 0x70, 0xc1, 0x9b, 0xed, 0xfc, 0x70,
	0x2f, 0x88, 0x35, 0xf9, 0x06, 0xee, 0xd3, 0xb5, 0x54, 0x2f, 0xba, 0x5c, 0x6f, 0xe2, 0x25, 0xa5,
	0x69, 0xbc, 0x4e, 0x93, 0x6e, 0xfe, 0x3f, 0xd4, 0xf0, 0x02, 0xec, 0x78, 0x46, 0x7b, 0x05, 0xd1,
	0x11, 0xc1, 0x8d, 0x67, 0xf4, 0xcc, 0x45, 0x8c, 0xcc, 0x6a, 0x7f, 0xb1, 0xf7, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x35, 0xfe, 0xdb, 0x22, 0xa0, 0x02, 0x00, 0x00,
}
