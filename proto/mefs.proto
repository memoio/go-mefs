syntax = "proto3";
package proto;

enum OpType {
    BroadCast = 0;
	  Put = 1;
	  Get = 2;
	  Append = 3;
	  Delete = 4;
}

enum KeyType {
    Wrong = 0;
    Role = 1;
    PublicKey = 2;
	  Config = 3;
    LFS = 4;
    Users = 5;
	  Keepers = 6;
	  Providers = 7;

    Block = 10;    // provider handle block data
	  BlockPos = 11; // keeper handle block pos
    ChalTime = 12;
    Pos = 13;
    Bucket = 14;
	
    HeartBeat = 20;
    UserInit = 21;
	  UserNotify = 22;
	  UserStart = 23;
	  UserStop = 24;
    Challenge = 25;
	  Repair = 26;
    ExternalAddress = 27;
    Storage = 28;

	  Query = 30;
	  Offer = 31;
	  UpKeeping = 32;
	  Channel = 33;

    ChalPay = 40; // each pay
    LastPay = 41;
    PosMeta = 42;
    Sign    = 43;
}

message KeyMeta{
    int32 Version = 1;
    KeyType KType = 2; // indicates which key type
	  string Mid = 3;     // main id = peerID or blockID
    repeated string Options = 4;
}

message UserBLS12Config{
    int32 version = 1;
    bytes pubkeyBls = 2;
    bytes pubkeyG = 3;
    repeated bytes pubkeyU = 4;
    repeated bytes pubkeyW = 5;
    bytes prikeyBls = 6;
    bytes X = 7;
    int32 count = 10;
    int32 tagCount = 11;  
}

message BucketRoot {
  int64 BucketID = 1;
  int64 OpCount = 2;
  bytes Root = 3; //merkle root
}

message LfsRoot {
  int64 CTime = 1;
  bytes Root  = 2;
  repeated BucketRoot BRoots = 3;
}

message SuperBlockInfo {
  int32 Version = 1;         //版本号
  int32 MetaBackupCount = 2; //对于所有的元数据块，副本数
  int64 CTime = 3;
  int64 NextBucketID = 4;
  repeated LfsRoot LRoot = 7;  // merkle root of bucket root 
}

message BucketOptions {
	int32 Version = 1;
	int32 Policy  = 2;
	int32 DataCount = 3;
	int32 ParityCount = 4;
	int32 TagFlag = 5;
	int32 SegmentSize = 6;
	int32 SegmentCount = 7; // number of segments
	int32 Encryption = 8;  // Encryption type, default is AES
}

message BucketInfo {
  string Name = 1;
  int64 BucketID = 2;
  int64 CTime = 3;          //本Bucket的创建时间
  BucketOptions BOpts = 4;
  int64 Length  = 5;
  int64 MTime = 7;          //本Bucket内数据上次修改时间
  int64 ObjectsBlockSize = 8; //本Bucket的ObjectsBlock序列化后占多少字节
  bool Deletion = 9;        //Bucket是否已删除
  int64 NextObjectID = 10;
  int64 NextOpID = 11;
  bytes Root = 12;  // merkle root
}

//总共构建出ObjectInfo
message ObjectInfo{
  Object Info = 1;
  int64 Length = 2;
  int64 CTime = 3; 
  int64 MTime = 4;
  int64 PartCount = 5;
  string ETag = 6;
  bool Deletion = 7;
  repeated ObjectPart Parts = 10; //构造出来的Part序列
}

//在add object的时候加入，
message Object {
  string Name = 1;                  //对象名称
  int64 BucketID = 2;               //本对象所属的Bucket
  int64 CTime = 3;                  //对象创建时间
  int64 ObjectID = 4; 
  bool Dir = 5;                     //是否为目录
  string ContentType = 9;           //对象的类型，如文本、图片
  map<string, string> Metadata = 10; // User可以对文件自定义一些元信息                        
}

//在add object及append object的时候会加入
message ObjectPart {
  string Name = 1;               //此分块所属的Object
  int64 ObjectID = 2;            //此分块所属的ObjectID
  int64 PartID = 3;              //此分块的ID
  int64 Start = 4;               //本对象的起始
  int64 Length = 5;              //对象长度
  int64 CTime = 6;               //append此Part的时间
  string ETag = 7;               //MD5
}


message DeleteObject {
  string Name     = 1;               //删除的objectName
  int64  ObjectID = 2;
  int64  Time     = 3;                //删除时间
}

message CancelOp {
  LfsOp OpType = 1;     //撤销的操作类型
  int64 OpID = 2;       //撤销的操作ID
}

enum LfsOp {
  OpErr = 0;     
  OpAdd = 1;     //添加一个Object
  OpAppend = 2;  //给object追加Part
  OpDelete = 3;  //删除某个Object
  OpCancel = 4;  //撤销前面的某个Operation，尚未实现（是否应支持撤销前面的一个撤销命令）
}

//OpRecord 元数据最终存储的格式是一串可压缩的操作记录
message OpRecord {
  LfsOp OpType = 1;     //操作类型
  int64 OpID = 2;       //操作ID，从1往上增
  bytes Payload = 3;    //根据操作类型解析Payload
}

message BlockOptions {
  BucketOptions Bopts = 1;
  int32 Start = 2;
  string UserID = 11; // for OSD
  string QueryID = 12;
}

message ShareLink{
    string UserID = 1;
    string QueryID = 2;
    string BucketName = 3;
    string ObjectName = 4;
    int64 BucketID = 5;
    BucketOptions BOpts = 6;
    repeated ObjectPart OParts = 7;
    bytes DecKey = 8;
    string KPs = 11;// keepers/providers
}

message ChalInfo{
    string QueryID = 1;
    string KeeperID = 2;
    string ProviderID = 3;
    string UserID = 4;
    int64 ChalTime = 5;
    int64 ChalLength = 6;
    int64 SuccessLength = 7;
    int64 TotalLength = 8;
    repeated string Blocks = 9;
    repeated string FaultBlocks = 10;
    string BlsProof = 11;
    bool Res = 12;
}

message ChannelSign {
  string ChannelID = 1;
  bytes Value = 2;
  bytes Sig = 3;    //user签名信息
  bytes PubKey = 4; //user公钥
}

message STValue {
  int32 Status = 1;
  int64 Start = 2;
  int64 Length = 3;
  bytes Value = 4;
  bytes Root = 5; // merkel root of Proof
  repeated int64 Share = 6; 
  repeated bytes Sign = 7;
} 

message KVData {
  bytes Key = 1;
  bytes Value = 2;
}